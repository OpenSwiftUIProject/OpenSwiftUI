{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject"},"topicSections":[{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/init(wrappedValue:)"],"title":"Creating a state object","anchor":"Creating-a-state-object"},{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/wrappedValue","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/projectedValue"],"title":"Getting the value","anchor":"Getting-the-value"},{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/DynamicProperty-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:ScM","text":"MainActor","kind":"attribute"},{"text":" ","kind":"text"},{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"@propertyWrapper","kind":"attribute"},{"text":" ","kind":"text"},{"text":"@preconcurrency","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateObject","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ObjectType","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObjectType","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Combine16ObservableObjectP","text":"ObservableObject","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a state object as the single source of truth for a reference type that"},{"type":"text","text":" "},{"type":"text","text":"you store in a view hierarchy. Create a state object in an "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/App","type":"reference","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene","type":"reference","isActive":true},{"type":"text","text":", or "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View","type":"reference","isActive":true},{"type":"text","text":" by applying the "},{"code":"@StateObject","type":"codeVoice"},{"type":"text","text":" attribute to a"},{"type":"text","text":" "},{"type":"text","text":"property declaration and providing an initial value that conforms to the"},{"type":"text","text":" "},{"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/opencombine\/main\/documentation\/opencombine\/observableobject","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"protocol. Declare state objects as private to prevent setting them from a"},{"type":"text","text":" "},{"type":"text","text":"memberwise initializer, which can conflict with the storage management that"},{"type":"text","text":" "},{"type":"text","text":"OpenSwiftUI provides:"}]},{"syntax":"swift","type":"codeListing","code":["class DataModel: ObservableObject {","    @Published var name = \"Some Name\"","    @Published var isEnabled = false","}","","struct MyView: View {","    @StateObject private var model = DataModel() \/\/ Create the state object.","","    var body: some View {","        Text(model.name) \/\/ Updates when the data model changes.","        MySubView()","            .environmentObject(model)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"OpenSwiftUI creates a new instance of the model object only once during the","type":"text"},{"text":" ","type":"text"},{"text":"lifetime of the container that declares the state object. For example,","type":"text"},{"text":" ","type":"text"},{"text":"OpenSwiftUI doesn’t create a new instance if a view’s inputs change, but does","type":"text"},{"text":" ","type":"text"},{"text":"create a new instance if the identity of a view changes. When published","type":"text"},{"text":" ","type":"text"},{"text":"properties of the observable object change, OpenSwiftUI updates any view that","type":"text"},{"text":" ","type":"text"},{"text":"depends on those properties, like the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Text"},{"text":" view in the above example.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to store a value type, like a structure, string, or"},{"type":"text","text":" "},{"type":"text","text":"integer, use the "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true},{"type":"text","text":" property wrapper instead. Also use "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true},{"type":"text","text":" "},{"type":"text","text":"if you need to store a reference type that conforms to the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","isActive":true},{"type":"text","text":" "},{"type":"text","text":"protocol. To learn more about Observation in OpenSwiftUI, see"},{"type":"text","text":" "},{"type":"text","text":"doc:Managing-model-data-in-your-app"},{"type":"text","text":"."}]}]},{"type":"heading","text":"Share state objects with subviews","anchor":"Share-state-objects-with-subviews","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can pass a state object into a subview through a property that has the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject"},{"type":"text","text":" attribute. Alternatively, add the object to the"},{"type":"text","text":" "},{"type":"text","text":"environment of a view hierarchy by applying the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/environmentObject(_:)"},{"type":"text","text":" modifier to a view, like "},{"type":"codeVoice","code":"MySubView"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"above code. You can then read the object inside "},{"type":"codeVoice","code":"MySubView"},{"type":"text","text":" or any of its"},{"type":"text","text":" "},{"type":"text","text":"descendants using the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentObject"},{"type":"text","text":" attribute:"}]},{"syntax":"swift","type":"codeListing","code":["struct MySubView: View {","    @EnvironmentObject var model: DataModel","","    var body: some View {","        Toggle(\"Enabled\", isOn: $model.isEnabled)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Get a "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","isActive":true},{"type":"text","text":" to the state object’s properties using the dollar sign"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"$"},{"type":"text","text":") operator. Use a binding when you want to create a two-way connection."},{"type":"text","text":" "},{"type":"text","text":"In the above code, the "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Toggle","isActive":true},{"type":"text","text":" controls the model’s "},{"type":"codeVoice","code":"isEnabled"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"through a binding."}]},{"type":"heading","text":"Initialize state objects using external data","anchor":"Initialize-state-objects-using-external-data","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a state object’s initial state depends on data that comes from"},{"type":"text","text":" "},{"type":"text","text":"outside its container, you can call the object’s initializer"},{"type":"text","text":" "},{"type":"text","text":"explicitly from within its container’s initializer. For example,"},{"type":"text","text":" "},{"type":"text","text":"suppose the data model from the previous example takes a "},{"code":"name","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"input during initialization and you want to use a value for that"},{"type":"text","text":" "},{"type":"text","text":"name that comes from outside the view. You can do this with"},{"type":"text","text":" "},{"type":"text","text":"a call to the state object’s initializer inside an explicit initializer"},{"type":"text","text":" "},{"type":"text","text":"that you create for the view:"}]},{"syntax":"swift","type":"codeListing","code":["struct MyInitializableView: View {","    @StateObject private var model: DataModel","","    init(name: String) {","        \/\/ OpenSwiftUI ensures that the following initialization uses the","        \/\/ closure only once during the lifetime of the view, so","        \/\/ later changes to the view's name input have no effect.","        _model = StateObject(wrappedValue: DataModel(name: name))","    }","","    var body: some View {","        VStack {","            Text(\"Name: \\(model.name)\")","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Use caution when doing this. OpenSwiftUI only initializes a state object","type":"text"},{"text":" ","type":"text"},{"text":"the first time you call its initializer in a given view. This","type":"text"},{"text":" ","type":"text"},{"text":"ensures that the object provides stable storage even as the view’s","type":"text"},{"text":" ","type":"text"},{"text":"inputs change. However, it might result in unexpected behavior or","type":"text"},{"text":" ","type":"text"},{"text":"unwanted side effects if you explicitly initialize the state object.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the above example, if the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" input to "},{"type":"codeVoice","code":"MyInitializableView"},{"type":"text","text":" "},{"type":"text","text":"changes, OpenSwiftUI reruns the view’s initializer with the new value. However,"},{"type":"text","text":" "},{"type":"text","text":"OpenSwiftUI runs the autoclosure that you provide to the state object’s"},{"type":"text","text":" "},{"type":"text","text":"initializer only the first time you call the state object’s initializer, so"},{"type":"text","text":" "},{"text":"the model’s stored ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" value doesn’t change.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Explicit state object initialization works well when the external data","type":"text"},{"text":" ","type":"text"},{"text":"that the object depends on doesn’t change for a given instance of the","type":"text"},{"text":" ","type":"text"},{"text":"object’s container. For example, you can create two views with different","type":"text"},{"text":" ","type":"text"},{"text":"constant names:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","    VStack {","        MyInitializableView(name: \"Ravi\")","        MyInitializableView(name: \"Maria\")","    }","}"]},{"type":"aside","style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"Even for a configurable state object, you still declare it","type":"text"},{"text":" ","type":"text"},{"text":"as private. This ensures that you can’t accidentally set the parameter","type":"text"},{"text":" ","type":"text"},{"text":"through a memberwise initializer of the view, because doing so can","type":"text"},{"text":" ","type":"text"},{"text":"conflict with the framework’s storage management and produce unexpected","type":"text"},{"text":" ","type":"text"},{"text":"results.","type":"text"}]}]},{"type":"heading","text":"Force reinitialization by changing view identity","anchor":"Force-reinitialization-by-changing-view-identity","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want OpenSwiftUI to reinitialize a state object when a view input"},{"type":"text","text":" "},{"type":"text","text":"changes, make sure that the view’s identity changes at the same time."},{"type":"text","text":" "},{"type":"text","text":"One way to do this is to bind the view’s identity to the value that changes"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/id(_:)","type":"reference","isActive":true},{"type":"text","text":" modifier. For example, you can ensure that"},{"type":"text","text":" "},{"type":"text","text":"the identity of an instance of "},{"type":"codeVoice","code":"MyInitializableView"},{"type":"text","text":" changes when its"},{"type":"text","text":" "},{"type":"codeVoice","code":"name"},{"type":"text","text":" input changes:"}]},{"syntax":"swift","type":"codeListing","code":["MyInitializableView(name: name)","    .id(name) \/\/ Binds the identity of the view to the name property."]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"If your view appears inside a ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ForEach","isActive":true,"type":"reference"},{"text":", it implicitly receives an","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/id(_:)","isActive":true,"type":"reference"},{"text":" modifier that uses the identifier of the corresponding","type":"text"},{"text":" ","type":"text"},{"text":"data element.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"If you need the view to reinitialize state based on changes in more than","type":"text"},{"text":" ","type":"text"},{"text":"one value, you can combine the values into a single identifier using a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hasher"},{"text":". For example,","type":"text"},{"text":" ","type":"text"},{"text":"if you want to update the data model in ","type":"text"},{"code":"MyInitializableView","type":"codeVoice"},{"text":" when the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values of either "},{"code":"name","type":"codeVoice"},{"type":"text","text":" or "},{"code":"isEnabled","type":"codeVoice"},{"type":"text","text":" change, you can combine both"},{"type":"text","text":" "},{"type":"text","text":"variables into a single hash:"}]},{"syntax":"swift","type":"codeListing","code":["var hash: Int {","    var hasher = Hasher()","    hasher.combine(name)","    hasher.combine(isEnabled)","    return hasher.finalize()","}"]},{"type":"paragraph","inlineContent":[{"text":"Then apply the combined hash to the view as an identifier:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["MyInitializableView(name: name, isEnabled: isEnabled)","    .id(hash)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Be mindful of the performance cost of reinitializing the state object every"},{"type":"text","text":" "},{"type":"text","text":"time the input changes. Also, changing view identity can have side"},{"type":"text","text":" "},{"type":"text","text":"effects. For example, OpenSwiftUI doesn’t automatically animate"},{"type":"text","text":" "},{"type":"text","text":"changes inside the view if the view’s identity changes at the same time."},{"type":"text","text":" "},{"type":"text","text":"Also, changing the identity resets "},{"inlineContent":[{"type":"text","text":"all"}],"type":"emphasis"},{"type":"text","text":" state held by the view, including"},{"type":"text","text":" "},{"type":"text","text":"values that you manage as "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/FocusState","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"codeVoice","code":"GestureState"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so on."}]}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI"]]},"metadata":{"symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"StateObject"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StateObject"}],"remoteSource":{"fileName":"StateObject.swift","url":"https:\/\/github.com\/OpenSwiftUIProject\/OpenSwiftUI\/blob\/main\/Sources\/OpenSwiftUICore\/Data\/Combine\/StateObject.swift#L184"},"role":"symbol","modules":[{"name":"OpenSwiftUI"}],"roleHeading":"Structure","platforms":[{"beta":false,"introducedAt":"13.0","unavailable":false,"deprecated":false,"name":"iOS"},{"beta":false,"introducedAt":"10.15","unavailable":false,"deprecated":false,"name":"macOS"},{"beta":false,"introducedAt":"13.0","unavailable":false,"deprecated":false,"name":"tvOS"},{"beta":false,"introducedAt":"1.0","unavailable":false,"deprecated":false,"name":"visionOS"},{"beta":false,"introducedAt":"6.0","unavailable":false,"deprecated":false,"name":"watchOS"}],"title":"StateObject","externalID":"s:15OpenSwiftUICore11StateObjectV"},"kind":"symbol","abstract":[{"type":"text","text":"A property wrapper type that instantiates an observable object."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"relationshipsSections":[{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/DynamicProperty","doc:\/\/OpenSwiftUI\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"seeAlsoSections":[{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-model-data-in-your-app","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject"],"title":"Creating model data","generated":true,"anchor":"Creating-model-data"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openswiftui\/stateobject"]}],"references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI/Binding":{"abstract":[{"type":"text","text":"A property wrapper type that can read and write a value owned by a source of"},{"type":"text","text":" "},{"type":"text","text":"truth."}],"url":"\/documentation\/openswiftui\/binding","type":"topic","navigatorTitle":[{"text":"Binding","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Binding","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","title":"Binding","kind":"symbol","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject":{"role":"symbol","navigatorTitle":[{"text":"StateObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","title":"StateObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/stateobject","abstract":[{"type":"text","text":"A property wrapper type that instantiates an observable object."}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View":{"url":"\/documentation\/openswiftui\/view","abstract":[{"type":"text","text":"A type that represents part of your app’s user interface and provides"},{"type":"text","text":" "},{"type":"text","text":"modifiers that you use to configure views."}],"role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View","title":"View","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"identifier"}],"navigatorTitle":[{"text":"View","kind":"identifier"}],"kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject/DynamicProperty-Implementations":{"type":"topic","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/DynamicProperty-Implementations","abstract":[],"url":"\/documentation\/openswiftui\/stateobject\/dynamicproperty-implementations","kind":"article","role":"collectionGroup","title":"DynamicProperty Implementations"},"https://swiftpackageindex.com/openswiftuiproject/opencombine/main/documentation/opencombine/observableobject":{"url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/opencombine\/main\/documentation\/opencombine\/observableobject","title":"ObservableObject","titleInlineContent":[{"text":"ObservableObject","type":"text"}],"type":"link","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/opencombine\/main\/documentation\/opencombine\/observableobject"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject/projectedValue":{"url":"\/documentation\/openswiftui\/stateobject\/projectedvalue","kind":"symbol","title":"projectedValue","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/projectedValue","abstract":[{"type":"text","text":"A projection of the state object that creates bindings to its"},{"type":"text","text":" "},{"type":"text","text":"properties."}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"projectedValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ObservedObject","kind":"typeIdentifier","preciseIdentifier":"s:15OpenSwiftUICore14ObservedObjectV"},{"text":"<","kind":"text"},{"text":"ObjectType","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Wrapper","kind":"typeIdentifier","preciseIdentifier":"s:15OpenSwiftUICore14ObservedObjectV7WrapperV"}],"type":"topic"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State":{"navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can read and write a value managed by OpenSwiftUI.","type":"text"}],"title":"State","kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/state","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/DynamicProperty":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/DynamicProperty","title":"DynamicProperty","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/openswiftui\/dynamicproperty","navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface for a stored variable that updates an external property of a"},{"type":"text","text":" "},{"type":"text","text":"view."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Scene":{"navigatorTitle":[{"text":"Scene","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene","abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/openswiftui\/scene","role":"symbol","title":"Scene","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scene","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/id(_:)":{"title":"id(_:)","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/id(_:)","abstract":[{"type":"text","text":"Binds a view’s identity to the given proxy value."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"id","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:15OpenSwiftUICore4ViewP","text":"View","kind":"typeIdentifier"}],"type":"topic","url":"\/documentation\/openswiftui\/view\/id(_:)"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/App":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"App","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/App","type":"topic","title":"App","role":"symbol","navigatorTitle":[{"text":"App","kind":"identifier"}],"url":"\/documentation\/openswiftui\/app","kind":"symbol","abstract":[{"text":"A type that represents the structure and behavior of an app.","type":"text"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Text":{"abstract":[],"role":"symbol","navigatorTitle":[{"text":"Text","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Text","kind":"identifier"}],"url":"\/documentation\/openswiftui\/text","kind":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Text","title":"Text"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/ObservedObject":{"role":"symbol","navigatorTitle":[{"text":"ObservedObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject","title":"ObservedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservedObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/observedobject","abstract":[{"type":"text","text":"A property wrapper type that subscribes to an observable object and"},{"type":"text","text":" "},{"type":"text","text":"invalidates a view whenever the observable object changes."}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject/wrappedValue":{"role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/wrappedValue","title":"wrappedValue","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrappedValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ObjectType","kind":"typeIdentifier"}],"url":"\/documentation\/openswiftui\/stateobject\/wrappedvalue","abstract":[{"text":"The underlying value referenced by the state object.","type":"text"}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/OpenSwiftUI\/s8SendableP"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/EnvironmentObject":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentObject","type":"topic","abstract":[{"text":"A property wrapper type for an observable object that a parent or ancestor","type":"text"},{"text":" ","type":"text"},{"text":"view supplies.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EnvironmentObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/environmentobject","title":"EnvironmentObject","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"EnvironmentObject","kind":"identifier"}]},"https://swiftpackageindex.com/openswiftuiproject/openobservation/main/documentation/openobservation/observable":{"url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","title":"Observable","titleInlineContent":[{"text":"Observable","type":"text"}],"type":"link","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject/init(wrappedValue:)":{"type":"topic","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject\/init(wrappedValue:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"wrappedValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() -> ","kind":"text"},{"text":"ObjectType","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates a new state object with an initial wrapped value.","type":"text"}],"url":"\/documentation\/openswiftui\/stateobject\/init(wrappedvalue:)","kind":"symbol","role":"symbol","title":"init(wrappedValue:)"},"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/FocusState":{"navigatorTitle":[{"kind":"identifier","text":"FocusState"}],"abstract":[],"type":"topic","title":"FocusState","url":"\/documentation\/openswiftui\/focusstate","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FocusState"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/FocusState","role":"symbol","kind":"symbol"},"https://developer.apple.com/documentation/swift/hasher":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/hasher","title":"Hasher","titleInlineContent":[{"text":"Hasher","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hasher"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Toggle":{"title":"Toggle","kind":"symbol","navigatorTitle":[{"text":"Toggle","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Toggle","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Toggle","url":"\/documentation\/openswiftui\/toggle"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/managing-model-data-in-your-app":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-model-data-in-your-app","title":"Managing model data in your app","kind":"article","type":"topic","abstract":[{"type":"text","text":"Create connections between your app’s data model and views."}],"url":"\/documentation\/openswiftui\/managing-model-data-in-your-app","role":"article"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/environmentObject(_:)":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/environmentObject(_:)","url":"\/documentation\/openswiftui\/view\/environmentobject(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"environmentObject","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","preciseIdentifier":"s:15OpenSwiftUICore4ViewP","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Supplies an observable object to a view’s hierarchy.","type":"text"}],"title":"environmentObject(_:)","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/ForEach":{"abstract":[{"type":"text","text":"A structure that computes views on demand from an underlying collection of"},{"type":"text","text":" "},{"type":"text","text":"identified data."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForEach"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEach"}],"url":"\/documentation\/openswiftui\/foreach","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ForEach","kind":"symbol","title":"ForEach"}}}