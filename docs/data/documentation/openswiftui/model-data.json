{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/model-data"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"kind":"article","seeAlsoSections":[{"anchor":"Data-and-storage","generated":true,"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Preferences"],"title":"Data and storage"}],"metadata":{"role":"collectionGroup","title":"Model data","roleHeading":"API Collection","modules":[{"name":"OpenSwiftUI"}]},"abstract":[{"text":"Manage the data that your app uses to drive its interface.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"OpenSwiftUI offers a declarative approach to user interface design. As you"},{"type":"text","text":" "},{"type":"text","text":"compose a hierarchy of views, you also indicate data dependencies for the views."},{"type":"text","text":" "},{"type":"text","text":"When the data changes, either due to an external event or because of an action"},{"type":"text","text":" "},{"type":"text","text":"that the user performs, OpenSwiftUI automatically updates the affected parts of"},{"type":"text","text":" "},{"type":"text","text":"the interface. As a result, the framework automatically performs most of the"},{"type":"text","text":" "},{"type":"text","text":"work that view controllers traditionally do."}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"https:\/\/docs-assets.developer.apple.com\/published\/7a8488351b0c9f662b694bc1153162a5\/model-data-hero@2x.png"}],"type":"paragraph"},{"inlineContent":[{"text":"The framework provides tools, like state variables and bindings, for connecting","type":"text"},{"text":" ","type":"text"},{"text":"your app’s data to the user interface. These tools help you maintain a single","type":"text"},{"text":" ","type":"text"},{"text":"source of truth for every piece of data in your app, in part by reducing the","type":"text"},{"text":" ","type":"text"},{"text":"amount of glue logic you write. Select the tool that best suits the task you","type":"text"},{"text":" ","type":"text"},{"text":"need to perform:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Manage transient UI state locally within a view by wrapping value types as"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true},{"type":"text","text":" properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Share a reference to a source of truth, like local state, using the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","isActive":true},{"type":"text","text":" property wrapper."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Connect to and observe reference model data in views by applying the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Observable()"},{"text":" macro to the model data type. Instantiate an observable model","type":"text"},{"text":" ","type":"text"},{"text":"data type directly in a view using a ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","type":"reference","isActive":true},{"text":" property. Share the observable","type":"text"},{"text":" ","type":"text"},{"text":"model data with other views in the hierarchy without passing a reference using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Environment","type":"reference","isActive":true},{"type":"text","text":" property wrapper."}]}]}]},{"text":"Leveraging property wrappers","anchor":"Leveraging-property-wrappers","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"OpenSwiftUI implements many data management types, like "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","isActive":true},{"type":"text","text":", as Swift property wrappers. Apply a property wrapper by adding an"},{"type":"text","text":" "},{"type":"text","text":"attribute with the wrapper’s name to a property’s declaration."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@State private var isVisible = true \/\/ Declares isVisible as a state variable."]},{"inlineContent":[{"text":"The property gains the behavior that the wrapper specifies. The state and data","type":"text"},{"text":" ","type":"text"},{"text":"flow property wrappers in OpenSwiftUI watch for changes in your data, and","type":"text"},{"text":" ","type":"text"},{"text":"automatically update affected views as necessary. When you refer directly to the","type":"text"},{"text":" ","type":"text"},{"text":"property in your code, you access the wrapped value, which for the ","type":"text"},{"code":"isVisible","type":"codeVoice"},{"text":" ","type":"text"},{"text":"state property in the example above is the stored Boolean.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["if isVisible == true {","    Text(\"Hello\") \/\/ Only renders when isVisible is true.","}"]},{"inlineContent":[{"text":"Alternatively, you can access a property wrapper’s projected value by prefixing","type":"text"},{"text":" ","type":"text"},{"text":"the property name with the dollar sign ($). OpenSwiftUI state and data flow","type":"text"},{"text":" ","type":"text"},{"text":"property wrappers project a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding"},{"text":", which is a two-way connection to the","type":"text"},{"text":" ","type":"text"},{"text":"wrapped value, allowing another view to access and mutate a single source of","type":"text"},{"text":" ","type":"text"},{"text":"truth.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Toggle(\"Visible\", isOn: $isVisible) \/\/ The toggle can update the stored value."]},{"inlineContent":[{"text":"For more information about property wrappers, see","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/properties\/#Property-Wrappers","type":"reference"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.swift.org\/documentation\/#the-swift-programming-language","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/openswiftui\/model-data"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"anchor":"Creating-and-sharing-view-state","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-user-interface-state","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding"],"title":"Creating and sharing view state"},{"anchor":"Creating-model-data","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-model-data-in-your-app","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject"],"title":"Creating model data"},{"anchor":"Distributing-model-data-throughout-your-app","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/environmentObject(_:)","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene\/environmentObject(_:)","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentObject"],"title":"Distributing model data throughout your app"},{"anchor":"Managing-dynamic-data","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/DynamicProperty"],"title":"Managing dynamic data"}],"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI"]]},"references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI/managing-user-interface-state":{"abstract":[{"type":"text","text":"Encapsulate view-specific data within your app’s view hierarchy to make your"},{"type":"text","text":" "},{"type":"text","text":"views reusable."}],"title":"Managing user interface state","kind":"article","type":"topic","url":"\/documentation\/openswiftui\/managing-user-interface-state","role":"article","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-user-interface-state"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Property-Wrappers":{"title":"Property Wrappers","type":"link","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/properties\/#Property-Wrappers","titleInlineContent":[{"type":"text","text":"Property Wrappers"}],"url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/properties\/#Property-Wrappers"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State":{"navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can read and write a value managed by OpenSwiftUI.","type":"text"}],"title":"State","kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/state","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/EnvironmentObject":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentObject","type":"topic","abstract":[{"text":"A property wrapper type for an observable object that a parent or ancestor","type":"text"},{"text":" ","type":"text"},{"text":"view supplies.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EnvironmentObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/environmentobject","title":"EnvironmentObject","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"EnvironmentObject","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/managing-model-data-in-your-app":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-model-data-in-your-app","title":"Managing model data in your app","kind":"article","type":"topic","abstract":[{"type":"text","text":"Create connections between your app’s data model and views."}],"url":"\/documentation\/openswiftui\/managing-model-data-in-your-app","role":"article"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Environment":{"url":"\/documentation\/openswiftui\/environment","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Environment","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that reads a value from a view’s environment."}],"title":"Environment","role":"symbol","navigatorTitle":[{"text":"Environment","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/environmentObject(_:)":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/environmentObject(_:)","url":"\/documentation\/openswiftui\/view\/environmentobject(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"environmentObject","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","preciseIdentifier":"s:15OpenSwiftUICore4ViewP","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"text":"Supplies an observable object to a view’s hierarchy.","type":"text"}],"title":"environmentObject(_:)","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Binding":{"abstract":[{"type":"text","text":"A property wrapper type that can read and write a value owned by a source of"},{"type":"text","text":" "},{"type":"text","text":"truth."}],"url":"\/documentation\/openswiftui\/binding","type":"topic","navigatorTitle":[{"text":"Binding","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Binding","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","title":"Binding","kind":"symbol","role":"symbol"},"https://docs-assets.developer.apple.com/published/7a8488351b0c9f662b694bc1153162a5/model-data-hero@2x.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"https:\/\/docs-assets.developer.apple.com\/published\/7a8488351b0c9f662b694bc1153162a5\/model-data-hero@2x.png"}],"type":"image","identifier":"https:\/\/docs-assets.developer.apple.com\/published\/7a8488351b0c9f662b694bc1153162a5\/model-data-hero@2x.png"},"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Bindable":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","title":"Bindable","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bindable"}],"role":"symbol","kind":"symbol","url":"\/documentation\/openswiftui\/bindable","navigatorTitle":[{"kind":"identifier","text":"Bindable"}],"abstract":[{"type":"text","text":"A property wrapper type that supports creating bindings to the mutable"},{"type":"text","text":" "},{"type":"text","text":"properties of observable objects."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/DynamicProperty":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/DynamicProperty","title":"DynamicProperty","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/openswiftui\/dynamicproperty","navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface for a stored variable that updates an external property of a"},{"type":"text","text":" "},{"type":"text","text":"view."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject":{"role":"symbol","navigatorTitle":[{"text":"StateObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","title":"StateObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/stateobject","abstract":[{"type":"text","text":"A property wrapper type that instantiates an observable object."}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/ObservedObject":{"role":"symbol","navigatorTitle":[{"text":"ObservedObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject","title":"ObservedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservedObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/observedobject","abstract":[{"type":"text","text":"A property wrapper type that subscribes to an observable object and"},{"type":"text","text":" "},{"type":"text","text":"invalidates a view whenever the observable object changes."}],"type":"topic","kind":"symbol"},"https://www.swift.org/documentation/#the-swift-programming-language":{"type":"link","title":"The Swift Programming Language","identifier":"https:\/\/www.swift.org\/documentation\/#the-swift-programming-language","url":"https:\/\/www.swift.org\/documentation\/#the-swift-programming-language","titleInlineContent":[{"type":"text","text":"The Swift Programming Language"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Scene/environmentObject(_:)":{"abstract":[{"type":"text","text":"Supplies an "},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":" to a view subhierarchy."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"environmentObject"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:11OpenSwiftUI5ScenePAAE17environmentObjectyQrqd__7Combine010ObservableF0Rd__lFQO1Tqd__mfp","kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:11OpenSwiftUI5SceneP","kind":"typeIdentifier","text":"Scene"}],"type":"topic","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene\/environmentObject(_:)","title":"environmentObject(_:)","kind":"symbol","url":"\/documentation\/openswiftui\/scene\/environmentobject(_:)"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Preferences":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Preferences","title":"Preferences","kind":"article","type":"topic","abstract":[{"text":"Indicate configuration preferences from views to their container views.","type":"text"}],"url":"\/documentation\/openswiftui\/preferences","role":"collectionGroup"}}}