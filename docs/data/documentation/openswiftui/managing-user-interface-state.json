{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"Store data as state in the least common ancestor of the views that need the data","type":"text"},{"text":" ","type":"text"},{"text":"to establish a single source of truth that’s shared across views. Provide the","type":"text"},{"text":" ","type":"text"},{"text":"data as read-only through a Swift property, or create a two-way connection to","type":"text"},{"text":" ","type":"text"},{"text":"the state with a binding. OpenSwiftUI watches for changes in the data, and","type":"text"},{"text":" ","type":"text"},{"text":"updates any affected views as needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"https:\/\/docs-assets.developer.apple.com\/published\/c75c698bd113a4ac7c708e178f8294ca\/managing-user-interface-state@2x.png","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"Don’t use state properties for persistent storage because the life cycle of","type":"text"},{"text":" ","type":"text"},{"text":"state variables mirrors the view life cycle. Instead, use them to manage","type":"text"},{"text":" ","type":"text"},{"text":"transient state that only affects the user interface, like the highlight state","type":"text"},{"text":" ","type":"text"},{"text":"of a button, filter settings, or the currently selected list item. You might","type":"text"},{"text":" ","type":"text"},{"text":"also find this kind of storage convenient while you prototype, before you’re","type":"text"},{"text":" ","type":"text"},{"text":"ready to make changes to your app’s data model.","type":"text"}],"type":"paragraph"},{"anchor":"Manage-mutable-values-as-state","level":3,"text":"Manage mutable values as state","type":"heading"},{"inlineContent":[{"text":"If a view needs to store data that it can modify, declare a variable with the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true,"type":"reference"},{"text":" property wrapper. For example, you can create an isPlaying Boolean inside","type":"text"},{"text":" ","type":"text"},{"text":"a podcast player view to keep track of when a podcast is running:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct PlayerView: View {","    @State private var isPlaying: Bool = false","    ","    var body: some View {","        \/\/ ...","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Marking the property as state tells the framework to manage the underlying","type":"text"},{"text":" ","type":"text"},{"text":"storage. Your view reads and writes the data, found in the state’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"text":" property, by using the property name. When you change the","type":"text"},{"text":" ","type":"text"},{"text":"value, OpenSwiftUI updates the affected parts of the view. For example, you can","type":"text"},{"text":" ","type":"text"},{"text":"add a button to the PlayerView that toggles the stored value when tapped, and","type":"text"},{"text":" ","type":"text"},{"text":"that displays a different image depending on the stored value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Button(action: {","    self.isPlaying.toggle()","}) {","    Image(systemName: isPlaying ? \"pause.circle\" : \"play.circle\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Limit the scope of state variables by declaring them as private. This ensures"},{"type":"text","text":" "},{"type":"text","text":"that the variables remain encapsulated in the view hierarchy that declares them."}],"type":"paragraph"},{"anchor":"Declare-Swift-properties-to-store-immutable-values","level":3,"text":"Declare Swift properties to store immutable values","type":"heading"},{"inlineContent":[{"text":"To provide a view with data that the view doesn’t modify, declare a standard","type":"text"},{"text":" ","type":"text"},{"text":"Swift property. For example, you can extend the podcast player to have an input","type":"text"},{"text":" ","type":"text"},{"text":"structure that contains strings for the episode title and the show name:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct PlayerView: View {","    let episode: Episode \/\/ The queued episode.","    @State private var isPlaying: Bool = false","    ","    var body: some View {","        VStack {","            \/\/ Display information about the episode.","            Text(episode.title)","            Text(episode.showTitle)","","","            Button(action: {","                self.isPlaying.toggle()","            }) {","                Image(systemName: isPlaying ? \"pause.circle\" : \"play.circle\")","            }","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"While the value of the episode property is a constant for PlayerView, it doesn’t","type":"text"},{"text":" ","type":"text"},{"text":"need to be constant in this view’s parent view. When the user selects a","type":"text"},{"text":" ","type":"text"},{"text":"different episode in the parent, OpenSwiftUI detects the state change and","type":"text"},{"text":" ","type":"text"},{"text":"recreates the PlayerView with a new input.","type":"text"}],"type":"paragraph"},{"anchor":"Share-access-to-state-with-bindings","level":3,"text":"Share access to state with bindings","type":"heading"},{"inlineContent":[{"type":"text","text":"If a view needs to share control of state with a child view, declare a property"},{"type":"text","text":" "},{"type":"text","text":"in the child with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding"},{"type":"text","text":" property wrapper. A binding represents a"},{"type":"text","text":" "},{"type":"text","text":"reference to existing storage, preserving a single source of truth for the"},{"type":"text","text":" "},{"type":"text","text":"underlying data. For example, if you refactor the podcast player view’s button"},{"type":"text","text":" "},{"type":"text","text":"into a child view called PlayButton, you can give it a binding to the isPlaying"},{"type":"text","text":" "},{"type":"text","text":"property:"}],"type":"paragraph"},{"syntax":"swift","code":["struct PlayButton: View {","    @Binding var isPlaying: Bool","    ","    var body: some View {","        Button(action: {","            self.isPlaying.toggle()","        }) {","            Image(systemName: isPlaying ? \"pause.circle\" : \"play.circle\")","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"As shown above, you read and write the binding’s wrapped value by referring"},{"type":"text","text":" "},{"type":"text","text":"directly to the property, just like state. But unlike a state property, the"},{"type":"text","text":" "},{"type":"text","text":"binding doesn’t have its own storage. Instead, it references a state property"},{"type":"text","text":" "},{"type":"text","text":"stored somewhere else, and provides a two-way connection to that storage."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you instantiate PlayButton, provide a binding to the corresponding state"},{"type":"text","text":" "},{"type":"text","text":"variable declared in the parent view by prefixing it with the dollar sign ($):"}],"type":"paragraph"},{"syntax":"swift","code":["struct PlayerView: View {","    var episode: Episode","    @State private var isPlaying: Bool = false","    ","    var body: some View {","        VStack {","            Text(episode.title)","            Text(episode.showTitle)","            PlayButton(isPlaying: $isPlaying) \/\/ Pass a binding.","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The $ prefix asks a wrapped property for its projectedValue, which for state is"},{"type":"text","text":" "},{"type":"text","text":"a binding to the underlying storage. Similarly, you can get a binding from a"},{"type":"text","text":" "},{"type":"text","text":"binding using the $ prefix, allowing you to pass a binding through an arbitrary"},{"type":"text","text":" "},{"type":"text","text":"number of levels of view hierarchy."}],"type":"paragraph"},{"inlineContent":[{"text":"You can also get a binding to a scoped value within a state variable. For","type":"text"},{"text":" ","type":"text"},{"text":"example, if you declare episode as a state variable in the player’s parent view,","type":"text"},{"text":" ","type":"text"},{"text":"and the episode structure also contains an isFavorite Boolean that you want to","type":"text"},{"text":" ","type":"text"},{"text":"control with a toggle, then you can refer to $episode.isFavorite to get a","type":"text"},{"text":" ","type":"text"},{"text":"binding to the episode’s favorite status:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Podcaster: View {","    @State private var episode = Episode(title: \"Some Episode\",","                                         showTitle: \"Great Show\",","                                         isFavorite: false)","    var body: some View {","        VStack {","            Toggle(\"Favorite\", isOn: $episode.isFavorite) \/\/ Bind to the Boolean.","            PlayerView(episode: episode)","        }","    }","}"],"type":"codeListing"},{"anchor":"Animate-state-transitions","level":3,"text":"Animate state transitions","type":"heading"},{"inlineContent":[{"type":"text","text":"When the view state changes, OpenSwiftUI updates affected views right away. If"},{"type":"text","text":" "},{"type":"text","text":"you want to smooth visual transitions, you can tell SwiftUI to animate them by"},{"type":"text","text":" "},{"type":"text","text":"wrapping the state change that triggers them in a call to the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/withAnimation(_:_:)"},{"type":"text","text":" function. For example, you can animate changes"},{"type":"text","text":" "},{"type":"text","text":"controlled by the isPlaying Boolean:"}],"type":"paragraph"},{"syntax":"swift","code":["withAnimation(.easeInOut(duration: 1)) {","    self.isPlaying.toggle()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"By changing isPlaying inside the animation function’s trailing closure, you tell"},{"type":"text","text":" "},{"type":"text","text":"OpenSwiftUI to animate anything that depends on the wrapped value, like a scale"},{"type":"text","text":" "},{"type":"text","text":"effect on the button’s image:"}],"type":"paragraph"},{"syntax":"swift","code":["Image(systemName: isPlaying ? \"pause.circle\" : \"play.circle\")","    .scaleEffect(isPlaying ? 1 : 1.5)"],"type":"codeListing"},{"inlineContent":[{"text":"OpenSwiftUI transitions the scale effect input over time between the given","type":"text"},{"text":" ","type":"text"},{"text":"values of 1 and 1.5, using the curve and duration that you specify, or","type":"text"},{"text":" ","type":"text"},{"text":"reasonable default values if you provide none. On the other hand, the image","type":"text"},{"text":" ","type":"text"},{"text":"content isn’t affected by the animation, even though the same Boolean dictates","type":"text"},{"text":" ","type":"text"},{"text":"which system image to display. That’s because OpenSwiftUI can’t incrementally","type":"text"},{"text":" ","type":"text"},{"text":"transition in a meaningful way between the two strings ","type":"text"},{"code":"pause.circle","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"play.circle","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can add animation to a state property, or as in the above example, to a","type":"text"},{"text":" ","type":"text"},{"text":"binding. Either way, OpenSwiftUI animates any view changes that happen when the","type":"text"},{"text":" ","type":"text"},{"text":"underlying stored value changes. For example, if you add a background color to","type":"text"},{"text":" ","type":"text"},{"text":"the PlayerView — at a level of view hierarchy above the location of the","type":"text"},{"text":" ","type":"text"},{"text":"animation block — OpenSwiftUI animates that as well:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["VStack {","    Text(episode.title)","    Text(episode.showTitle)","    PlayButton(isPlaying: $isPlaying)","}",".background(isPlaying ? Color.green : Color.red) \/\/ Transitions with animation."],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When you want to apply animations to specific views, rather than across all"},{"type":"text","text":" "},{"type":"text","text":"views triggered by a change in state, use the "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/animation(_:value:)","type":"reference","isActive":true},{"type":"text","text":" view"},{"type":"text","text":" "},{"type":"text","text":"modifier instead."}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"Encapsulate view-specific data within your app’s view hierarchy to make your"},{"type":"text","text":" "},{"type":"text","text":"views reusable."}],"metadata":{"modules":[{"name":"OpenSwiftUI"}],"roleHeading":"Article","title":"Managing user interface state","role":"article"},"variants":[{"paths":["\/documentation\/openswiftui\/managing-user-interface-state"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/model-data"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-user-interface-state"},"seeAlsoSections":[{"generated":true,"anchor":"Creating-and-sharing-view-state","title":"Creating and sharing view state","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding"]}],"kind":"article","references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI/Bindable":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","title":"Bindable","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bindable"}],"role":"symbol","kind":"symbol","url":"\/documentation\/openswiftui\/bindable","navigatorTitle":[{"kind":"identifier","text":"Bindable"}],"abstract":[{"type":"text","text":"A property wrapper type that supports creating bindings to the mutable"},{"type":"text","text":" "},{"type":"text","text":"properties of observable objects."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State":{"navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can read and write a value managed by OpenSwiftUI.","type":"text"}],"title":"State","kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/state","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/animation(_:value:)":{"abstract":[],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/animation(_:value:)","type":"topic","title":"animation(_:value:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"animation","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Animation","kind":"typeIdentifier","preciseIdentifier":"s:15OpenSwiftUICore9AnimationV"},{"text":"?, ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:15OpenSwiftUICore4ViewP"}],"kind":"symbol","url":"\/documentation\/openswiftui\/view\/animation(_:value:)","role":"symbol"},"https://docs-assets.developer.apple.com/published/c75c698bd113a4ac7c708e178f8294ca/managing-user-interface-state@2x.png":{"type":"image","variants":[{"url":"https:\/\/docs-assets.developer.apple.com\/published\/c75c698bd113a4ac7c708e178f8294ca\/managing-user-interface-state@2x.png","traits":["1x","light"]}],"identifier":"https:\/\/docs-assets.developer.apple.com\/published\/c75c698bd113a4ac7c708e178f8294ca\/managing-user-interface-state@2x.png","alt":null},"doc://OpenSwiftUI/documentation/OpenSwiftUI/withAnimation(_:_:)":{"abstract":[{"type":"text","text":"Returns the result of recomputing the view’s body with the provided"},{"type":"text","text":" "},{"type":"text","text":"animation."}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/withAnimation(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/withanimation(_:_:)","title":"withAnimation(_:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withAnimation","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:15OpenSwiftUICore9AnimationV","text":"Animation","kind":"typeIdentifier"},{"text":"?, () ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/model-data":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/model-data","title":"Model data","type":"topic","role":"collectionGroup","kind":"article","url":"\/documentation\/openswiftui\/model-data","abstract":[{"type":"text","text":"Manage the data that your app uses to drive its interface."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Binding":{"abstract":[{"type":"text","text":"A property wrapper type that can read and write a value owned by a source of"},{"type":"text","text":" "},{"type":"text","text":"truth."}],"url":"\/documentation\/openswiftui\/binding","type":"topic","navigatorTitle":[{"text":"Binding","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Binding","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","title":"Binding","kind":"symbol","role":"symbol"}}}