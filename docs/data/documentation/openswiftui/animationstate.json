{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnimationState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/VectorArithmetic","preciseIdentifier":"s:15OpenSwiftUICore16VectorArithmeticP","text":"VectorArithmetic"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationContext"},{"type":"text","text":" uses this type to store state for a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/CustomAnimation"},{"type":"text","text":". To retrieve the stored state of a context, you can"},{"type":"text","text":" "},{"type":"text","text":"use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationContext\/state"},{"type":"text","text":" property. However, a more convenient"},{"type":"text","text":" "},{"type":"text","text":"way to access the animation state is to define an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationStateKey"},{"type":"text","text":" "},{"type":"text","text":"and extend "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationContext"},{"type":"text","text":" with a computed property that gets"},{"type":"text","text":" "},{"type":"text","text":"and sets the animation state, as shown in the following code:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["private struct PausableState<Value: VectorArithmetic>: AnimationStateKey {","    static var defaultValue: Self { .init() }","}","","extension AnimationContext {","    fileprivate var pausableState: PausableState<Value> {","        get { state[PausableState<Value>.self] }","        set { state[PausableState<Value>.self] = newValue }","    }","}"]},{"inlineContent":[{"text":"When creating an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationStateKey"},{"text":", it’s convenient to define the","type":"text"},{"text":" ","type":"text"},{"text":"state values that your custom animation needs. For example, the following","type":"text"},{"text":" ","type":"text"},{"text":"code adds the properties ","type":"text"},{"type":"codeVoice","code":"paused"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"pauseTime"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"PausableState"},{"text":" ","type":"text"},{"text":"animation state key:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["private struct PausableState<Value: VectorArithmetic>: AnimationStateKey {","    var paused = false","    var pauseTime: TimeInterval = 0.0","","    static var defaultValue: Self { .init() }","}"]},{"inlineContent":[{"type":"text","text":"To access the pausable state in a "},{"type":"codeVoice","code":"PausableAnimation"},{"type":"text","text":", the follow code"},{"type":"text","text":" "},{"type":"text","text":"calls "},{"type":"codeVoice","code":"pausableState"},{"type":"text","text":" instead of using the context’s"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationContext\/state"},{"type":"text","text":" property. And because the animation state key"},{"type":"text","text":" "},{"type":"codeVoice","code":"PausableState"},{"type":"text","text":" defines properties for state values, the custom animation"},{"type":"text","text":" "},{"type":"text","text":"can read and write those values."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct PausableAnimation: CustomAnimation {","    let base: Animation","","    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {","        let paused = context.environment.animationPaused","","        let pausableState = context.pausableState","        var pauseTime = pausableState.pauseTime","        if pausableState.paused != paused {","            pauseTime = time - pauseTime","            context.pausableState = PausableState(paused: paused, pauseTime: pauseTime)","        }","","        let effectiveTime = paused ? pauseTime : time - pauseTime","        let result = base.animate(value: value, time: effectiveTime, context: &context)","        return result","    }","}"]},{"anchor":"Storing-state-for-secondary-animations","level":3,"text":"Storing state for secondary animations","type":"heading"},{"inlineContent":[{"type":"text","text":"A custom animation can also use "},{"type":"codeVoice","code":"AnimationState"},{"type":"text","text":" to store the state of a"},{"type":"text","text":" "},{"type":"text","text":"secondary animation. For example, the following code creates an"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationStateKey","type":"reference"},{"type":"text","text":" that includes the property "},{"type":"codeVoice","code":"secondaryState"},{"type":"text","text":", which a"},{"type":"text","text":" "},{"type":"text","text":"custom animation can use to store other state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["private struct TargetState<Value: VectorArithmetic>: AnimationStateKey {","    var timeDelta = 0.0","    var valueDelta = Value.zero","    var secondaryState: AnimationState<Value>? = .init()","","    static var defaultValue: Self { .init() }","}","","extension AnimationContext {","    fileprivate var targetState: TargetState<Value> {","        get { state[TargetState<Value>.self] }","        set { state[TargetState<Value>.self] = newValue }","    }","}"]},{"inlineContent":[{"text":"The custom animation ","type":"text"},{"type":"codeVoice","code":"TargetAnimation"},{"text":" uses ","type":"text"},{"type":"codeVoice","code":"TargetState"},{"text":" to store state","type":"text"},{"text":" ","type":"text"},{"text":"data in ","type":"text"},{"type":"codeVoice","code":"secondaryState"},{"text":" for another animation that runs as part of the","type":"text"},{"text":" ","type":"text"},{"text":"target animation.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct TargetAnimation: CustomAnimation {","    var base: Animation","    var secondary: Animation","","    func animate<V: VectorArithmetic>(value: V, time: Double, context: inout AnimationContext<V>) -> V? {","        var targetValue = value","        if let secondaryState = context.targetState.secondaryState {","            var secondaryContext = context","            secondaryContext.state = secondaryState","            let secondaryValue = value - context.targetState.valueDelta","            let result = secondary.animate(","                value: secondaryValue, time: time - context.targetState.timeDelta,","                context: &secondaryContext)","            if let result = result {","                context.targetState.secondaryState = secondaryContext.state","                targetValue = result + context.targetState.valueDelta","            } else {","                context.targetState.secondaryState = nil","            }","        }","        let result = base.animate(value: targetValue, time: time, context: &context)","        if let result = result {","            targetValue = result","        } else if context.targetState.secondaryState == nil {","            return nil","        }","        return targetValue","}","","    func shouldMerge<V: VectorArithmetic>(previous: Animation, value: V, time: Double, context: inout AnimationContext<V>) -> Bool {","        guard let previous = previous.base as? Self else { return false }","        var secondaryContext = context","        if let secondaryState = context.targetState.secondaryState {","            secondaryContext.state = secondaryState","            context.targetState.valueDelta = secondary.animate(","                value: value, time: time - context.targetState.timeDelta,","                context: &secondaryContext) ?? value","        } else {","            context.targetState.valueDelta = value","        }","        \/\/ Reset the target each time a merge occurs.","        context.targetState.secondaryState = .init()","        context.targetState.timeDelta = time","        return base.shouldMerge(","            previous: previous.base, value: value, time: time,","            context: &context)","    }","}"]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI"]]},"identifier":{"url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationState","interfaceLanguage":"swift"},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"AnimationState"}],"roleHeading":"Structure","role":"symbol","platforms":[{"introducedAt":"13.0","deprecated":false,"beta":false,"unavailable":false,"name":"iOS"},{"introducedAt":"10.15","deprecated":false,"beta":false,"unavailable":false,"name":"macOS"},{"introducedAt":"13.0","deprecated":false,"beta":false,"unavailable":false,"name":"tvOS"},{"introducedAt":"1.0","deprecated":false,"beta":false,"unavailable":false,"name":"visionOS"},{"introducedAt":"6.0","deprecated":false,"beta":false,"unavailable":false,"name":"watchOS"}],"externalID":"s:15OpenSwiftUICore14AnimationStateV","title":"AnimationState","modules":[{"name":"OpenSwiftUI"}],"remoteSource":{"url":"https:\/\/github.com\/OpenSwiftUIProject\/OpenSwiftUI\/blob\/main\/Sources\/OpenSwiftUICore\/Animation\/Animation\/AnimationState.swift#L140","fileName":"AnimationState.swift"},"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnimationState"}]},"topicSections":[{"generated":true,"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationState\/init()"]},{"generated":true,"title":"Subscripts","anchor":"Subscripts","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationState\/subscript(_:)"]}],"kind":"symbol","abstract":[{"type":"text","text":"A container that stores the state for a custom animation."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openswiftui\/animationstate"]}],"references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/AnimationState/init()":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationState\/init()","url":"\/documentation\/openswiftui\/animationstate\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Create an empty state container."}],"title":"init()","kind":"symbol","type":"topic","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/AnimationState/subscript(_:)":{"abstract":[{"type":"text","text":"Accesses the state for a custom key."}],"url":"\/documentation\/openswiftui\/animationstate\/subscript(_:)","type":"topic","fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"text":"K","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"K","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"K","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:15OpenSwiftUICore17AnimationStateKeyP5ValueQa","text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationState\/subscript(_:)","title":"subscript(_:)","kind":"symbol","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/AnimationState":{"url":"\/documentation\/openswiftui\/animationstate","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnimationState"}],"abstract":[{"type":"text","text":"A container that stores the state for a custom animation."}],"title":"AnimationState","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationState","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnimationState"}],"type":"topic"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/CustomAnimation":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/CustomAnimation","role":"symbol","abstract":[{"type":"text","text":"A type that defines how an animatable value changes over time."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomAnimation","kind":"identifier"}],"navigatorTitle":[{"text":"CustomAnimation","kind":"identifier"}],"title":"CustomAnimation","url":"\/documentation\/openswiftui\/customanimation","type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/AnimationContext/state":{"role":"symbol","type":"topic","url":"\/documentation\/openswiftui\/animationcontext\/state","title":"state","kind":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationContext\/state","abstract":[{"type":"text","text":"The current state of a custom animation."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AnimationState","kind":"typeIdentifier","preciseIdentifier":"s:15OpenSwiftUICore14AnimationStateV"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/AnimationContext":{"title":"AnimationContext","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnimationContext"}],"type":"topic","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationContext","abstract":[{"type":"text","text":"Contextual values that a custom animation can use to manage state and"},{"type":"text","text":" "},{"type":"text","text":"access a view’s environment."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnimationContext"}],"url":"\/documentation\/openswiftui\/animationcontext","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/AnimationStateKey":{"url":"\/documentation\/openswiftui\/animationstatekey","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnimationStateKey","kind":"identifier"}],"abstract":[{"text":"A key for accessing animation state values.","type":"text"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/AnimationStateKey","role":"symbol","title":"AnimationStateKey","navigatorTitle":[{"text":"AnimationStateKey","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/VectorArithmetic":{"title":"VectorArithmetic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"VectorArithmetic"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/VectorArithmetic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VectorArithmetic"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that can serve as the animatable data of an animatable type."}],"url":"\/documentation\/openswiftui\/vectorarithmetic"}}}