{"topicSections":[{"title":"Structures","generated":true,"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/GraphicsContext\/BlendMode","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/GraphicsContext\/ClipOptions"],"anchor":"Structures"}],"sections":[],"identifier":{"url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/GraphicsContext","interfaceLanguage":"swift"},"metadata":{"navigatorTitle":[{"text":"GraphicsContext","kind":"identifier"}],"remoteSource":{"fileName":"GraphicsContext.swift","url":"https:\/\/github.com\/OpenSwiftUIProject\/OpenSwiftUI\/blob\/main\/Sources\/OpenSwiftUICore\/Graphic\/GraphicsContext.swift#L120"},"roleHeading":"Structure","symbolKind":"struct","externalID":"s:15OpenSwiftUICore15GraphicsContextV","title":"GraphicsContext","modules":[{"name":"OpenSwiftUI"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"GraphicsContext"}]},"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GraphicsContext","kind":"identifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use a context to execute 2D drawing primitives. For example, you can draw"},{"type":"text","text":" "},{"type":"text","text":"filled shapes using the "},{"type":"codeVoice","code":"fill(_:with:style:)"},{"type":"text","text":" method inside a "},{"type":"codeVoice","code":"Canvas"},{"type":"text","text":" "},{"type":"text","text":"view:"}]},{"type":"codeListing","code":["Canvas { context, size in","    context.fill(","        Path(ellipseIn: CGRect(origin: .zero, size: size)),","        with: .color(.green))","}",".frame(width: 300, height: 200)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above draws an ellipse that just fits inside a canvas that’s"},{"type":"text","text":" "},{"type":"text","text":"constrained to 300 points wide and 200 points tall:"}]},{"type":"paragraph","inlineContent":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to outlining or filling paths, you can draw images, text,"},{"type":"text","text":" "},{"type":"text","text":"and OpenSwiftUI views. You can also use the context to perform many common"},{"type":"text","text":" "},{"type":"text","text":"graphical operations, like adding masks, applying filters and"},{"type":"text","text":" "},{"type":"text","text":"transforms, and setting a blend mode. For example you can add"},{"type":"text","text":" "},{"type":"text","text":"a mask using the "},{"code":"clip(to:style:options:)","type":"codeVoice"},{"type":"text","text":" method:"}]},{"type":"codeListing","code":["let halfSize = size.applying(CGAffineTransform(scaleX: 0.5, y: 0.5))","context.clip(to: Path(CGRect(origin: .zero, size: halfSize)))","context.fill(","    Path(ellipseIn: CGRect(origin: .zero, size: size)),","    with: .color(.green))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The rectangular mask hides all but one quadrant of the ellipse:","type":"text"}]},{"type":"paragraph","inlineContent":[]},{"type":"paragraph","inlineContent":[{"text":"The order of operations matters. Changes that you make to the state of","type":"text"},{"text":" ","type":"text"},{"text":"the context, like adding a mask or a filter, apply to later","type":"text"},{"text":" ","type":"text"},{"text":"drawing operations. If you reverse the fill and clip operations in","type":"text"},{"text":" ","type":"text"},{"text":"the example above, so that the fill comes first, the mask doesn’t","type":"text"},{"text":" ","type":"text"},{"text":"affect the ellipse.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Each context references a particular layer in a tree of transparency layers,","type":"text"},{"text":" ","type":"text"},{"text":"and also contains a full copy of the drawing state. You can modify the","type":"text"},{"text":" ","type":"text"},{"text":"state of one context without affecting the state of any other, even if","type":"text"},{"text":" ","type":"text"},{"text":"they refer to the same layer. For example you can draw the masked ellipse","type":"text"},{"text":" ","type":"text"},{"text":"from the previous example into a copy of the main context, and then add a","type":"text"},{"text":" ","type":"text"},{"text":"rectangle into the main context:","type":"text"}]},{"type":"codeListing","code":["\/\/ Create a copy of the context to draw a clipped ellipse.","var maskedContext = context","let halfSize = size.applying(CGAffineTransform(scaleX: 0.5, y: 0.5))","maskedContext.clip(to: Path(CGRect(origin: .zero, size: halfSize)))","maskedContext.fill(","    Path(ellipseIn: CGRect(origin: .zero, size: size)),","    with: .color(.green))","","\/\/ Go back to the original context to draw the rectangle.","let origin = CGPoint(x: size.width \/ 4, y: size.height \/ 4)","context.fill(","    Path(CGRect(origin: origin, size: halfSize)),","    with: .color(.blue))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The mask doesn’t clip the rectangle because the mask isn’t part of the","type":"text"},{"text":" ","type":"text"},{"text":"main context. However, both contexts draw into the same view because","type":"text"},{"text":" ","type":"text"},{"text":"you created one context as a copy of the other:","type":"text"}]},{"type":"paragraph","inlineContent":[]},{"type":"paragraph","inlineContent":[{"text":"The context has access to an ","type":"text"},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentValues","type":"reference"},{"text":" instance called","type":"text"},{"text":" ","type":"text"},{"code":"environment","type":"codeVoice"},{"text":" that’s initially copied from the environment of its","type":"text"},{"text":" ","type":"text"},{"text":"enclosing view. OpenSwiftUI uses environment values — like the display","type":"text"},{"text":" ","type":"text"},{"text":"resolution and color scheme — to resolve types like ","type":"text"},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Image","type":"reference"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Color","type":"reference"},{"text":" that appear in the context. You can also access values stored","type":"text"},{"text":" ","type":"text"},{"text":"in the environment for your own purposes.","type":"text"}]}],"kind":"content"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/openswiftui\/graphicscontext"]}],"abstract":[{"text":"An immediate mode drawing destination, and its current state.","type":"text"}],"references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/EnvironmentValues":{"navigatorTitle":[{"text":"EnvironmentValues","kind":"identifier"}],"abstract":[{"type":"text","text":"A collection of environment values propagated through a view hierarchy."}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentValues","role":"symbol","url":"\/documentation\/openswiftui\/environmentvalues","kind":"symbol","title":"EnvironmentValues","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EnvironmentValues","kind":"identifier"}],"type":"topic"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Color":{"type":"topic","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Color","abstract":[{"type":"text","text":"A representation of a color that adapts to a given context."}],"url":"\/documentation\/openswiftui\/color","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Color","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"Color","navigatorTitle":[{"text":"Color","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/GraphicsContext/BlendMode":{"title":"GraphicsContext.BlendMode","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BlendMode","kind":"identifier"}],"abstract":[{"type":"text","text":"The ways that a graphics context combines new content with background"},{"type":"text","text":" "},{"type":"text","text":"content."}],"type":"topic","url":"\/documentation\/openswiftui\/graphicscontext\/blendmode","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/GraphicsContext\/BlendMode","kind":"symbol","navigatorTitle":[{"text":"BlendMode","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/GraphicsContext/ClipOptions":{"title":"GraphicsContext.ClipOptions","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClipOptions","kind":"identifier"}],"role":"symbol","abstract":[],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/GraphicsContext\/ClipOptions","navigatorTitle":[{"text":"ClipOptions","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/graphicscontext\/clipoptions"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Image":{"title":"Image","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Image","kind":"identifier"}],"abstract":[],"type":"topic","url":"\/documentation\/openswiftui\/image","role":"symbol","kind":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Image","navigatorTitle":[{"text":"Image","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/GraphicsContext":{"title":"GraphicsContext","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GraphicsContext","kind":"identifier"}],"abstract":[{"type":"text","text":"An immediate mode drawing destination, and its current state."}],"type":"topic","url":"\/documentation\/openswiftui\/graphicscontext","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/GraphicsContext","kind":"symbol","navigatorTitle":[{"text":"GraphicsContext","kind":"identifier"}]}}}