{"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI"]]},"abstract":[{"type":"text","text":"A property wrapper type that can read and write a value managed by OpenSwiftUI."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@frozen"},{"kind":"text","text":" "},{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"State"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"Use state as the single source of truth for a given value type that you"},{"type":"text","text":" "},{"type":"text","text":"store in a view hierarchy. Create a state value in an "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/App","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View","isActive":true},{"type":"text","text":" by applying the "},{"type":"codeVoice","code":"@State"},{"type":"text","text":" attribute to a property declaration"},{"type":"text","text":" "},{"type":"text","text":"and providing an initial value. Declare state as private to prevent setting"},{"type":"text","text":" "},{"type":"text","text":"it in a memberwise initializer, which can conflict with the storage"},{"type":"text","text":" "},{"type":"text","text":"management that OpenSwiftUI provides:"}],"type":"paragraph"},{"code":["struct PlayButton: View {","    @State private var isPlaying: Bool = false \/\/ Create the state.","","    var body: some View {","        Button(isPlaying ? \"Pause\" : \"Play\") { \/\/ Read the state.","            isPlaying.toggle() \/\/ Write the state.","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"OpenSwiftUI manages the property’s storage. When the value changes, OpenSwiftUI"},{"type":"text","text":" "},{"type":"text","text":"updates the parts of the view hierarchy that depend on the value."},{"type":"text","text":" "},{"type":"text","text":"To access a state’s underlying value, you use its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/wrappedValue"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"However, as a shortcut Swift enables you to access the wrapped value by"},{"type":"text","text":" "},{"type":"text","text":"referring directly to the state instance. The above example reads and"},{"type":"text","text":" "},{"type":"text","text":"writes the "},{"type":"codeVoice","code":"isPlaying"},{"type":"text","text":" state property’s wrapped value by referring to the"},{"type":"text","text":" "},{"type":"text","text":"property directly."}],"type":"paragraph"},{"inlineContent":[{"text":"Declare state as private in the highest view in the view hierarchy that","type":"text"},{"text":" ","type":"text"},{"text":"needs access to the value. Then share the state with any subviews that also","type":"text"},{"text":" ","type":"text"},{"text":"need access, either directly for read-only access, or as a binding for","type":"text"},{"text":" ","type":"text"},{"text":"read-write access. You can safely mutate state properties from any thread.","type":"text"}],"type":"paragraph"},{"anchor":"Share-state-with-subviews","type":"heading","level":3,"text":"Share state with subviews"},{"inlineContent":[{"text":"If you pass a state property to a subview, OpenSwiftUI updates the subview","type":"text"},{"text":" ","type":"text"},{"text":"any time the value changes in the container view, but the subview can’t","type":"text"},{"text":" ","type":"text"},{"text":"modify the value. To enable the subview to modify the state’s stored value,","type":"text"},{"text":" ","type":"text"},{"text":"pass a ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","type":"reference","isActive":true},{"text":" instead.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, you can remove the ","type":"text"},{"type":"codeVoice","code":"isPlaying"},{"text":" state from the play button in","type":"text"},{"text":" ","type":"text"},{"text":"the above example, and instead make the button take a binding:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct PlayButton: View {","    @Binding var isPlaying: Bool \/\/ Play button now receives a binding.","","    var body: some View {","        Button(isPlaying ? \"Pause\" : \"Play\") {","            isPlaying.toggle()","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then you can define a player view that declares the state and creates a","type":"text"},{"text":" ","type":"text"},{"text":"binding to the state. Get the binding to the state value by accessing the","type":"text"},{"text":" ","type":"text"},{"text":"state’s ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/projectedValue"},{"text":", which you get by prefixing the property name","type":"text"},{"text":" ","type":"text"},{"text":"with a dollar sign (","type":"text"},{"code":"$","type":"codeVoice"},{"text":"):","type":"text"}]},{"type":"codeListing","code":["struct PlayerView: View {","    @State private var isPlaying: Bool = false \/\/ Create the state here now.","","    var body: some View {","        VStack {","            PlayButton(isPlaying: $isPlaying) \/\/ Pass a binding.","","            \/\/ ...","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like you do for a "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","type":"reference","isActive":true},{"type":"text","text":", declare "},{"code":"State","type":"codeVoice"},{"type":"text","text":" as private to prevent"},{"type":"text","text":" "},{"type":"text","text":"setting it in a memberwise initializer, which can conflict with the storage"},{"type":"text","text":" "},{"type":"text","text":"management that OpenSwiftUI provides. Unlike a state object, always"},{"type":"text","text":" "},{"type":"text","text":"initialize state by providing a default value in the state’s"},{"type":"text","text":" "},{"type":"text","text":"declaration, as in the above examples. Use state only for storage that’s"},{"type":"text","text":" "},{"type":"text","text":"local to a view and its subviews."}]},{"type":"heading","level":3,"anchor":"Store-observable-objects","text":"Store observable objects"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also store observable objects that you create with the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()"},{"type":"text","text":" "},{"type":"text","text":"macro in "},{"type":"codeVoice","code":"State"},{"type":"text","text":"; for example:"}]},{"type":"codeListing","code":["@Observable","class Library {","    var name = \"My library of books\"","    \/\/ ...","}","","struct ContentView: View {","    @State private var library = Library()","","    var body: some View {","        LibraryView(library: library)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" property always instantiates its default value when OpenSwiftUI","type":"text"},{"text":" ","type":"text"},{"text":"instantiates the view. For this reason, avoid side effects and","type":"text"},{"text":" ","type":"text"},{"text":"performance-intensive work when initializing the default value. For","type":"text"},{"text":" ","type":"text"},{"text":"example, if a view updates frequently, allocating a new default object each","type":"text"},{"text":" ","type":"text"},{"text":"time the view initializes can become expensive. Instead, you can defer the","type":"text"},{"text":" ","type":"text"},{"text":"creation of the object using the ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/task(priority:_:)","type":"reference","isActive":true},{"text":" modifier, which","type":"text"},{"text":" ","type":"text"},{"text":"is called only once when the view first appears:","type":"text"}]},{"type":"codeListing","code":["struct ContentView: View {","    @State private var library: Library?","","    var body: some View {","        LibraryView(library: library)","            .task {","                library = Library()","            }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Delaying the creation of the observable state object ensures that","type":"text"},{"text":" ","type":"text"},{"text":"unnecessary allocations of the object doesn’t happen each time OpenSwiftUI","type":"text"},{"text":" ","type":"text"},{"text":"initializes the view. Using the ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/task(priority:_:)","isActive":true,"type":"reference"},{"text":" modifier is also","type":"text"},{"text":" ","type":"text"},{"text":"an effective way to defer any other kind of work required to create the","type":"text"},{"text":" ","type":"text"},{"text":"initial state of the view, such as network calls or file access.","type":"text"}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"It’s possible to store an object that conforms to the","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/opencombine\/main\/documentation\/opencombine\/observableobject","type":"reference"},{"text":" ","type":"text"},{"text":"protocol in a ","type":"text"},{"code":"State","type":"codeVoice"},{"text":" property. However the view will only update when","type":"text"},{"text":" ","type":"text"},{"text":"the reference to the object changes, such as when setting the property with","type":"text"},{"text":" ","type":"text"},{"text":"a reference to another object. The view will not update if any of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"object’s published properties change. To track changes to both the reference"},{"type":"text","text":" "},{"type":"text","text":"and the object’s published properties, use "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","isActive":true},{"type":"text","text":" instead of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true},{"type":"text","text":" when storing the object."}]}]},{"anchor":"Share-observable-state-objects-with-subviews","type":"heading","level":3,"text":"Share observable state objects with subviews"},{"type":"paragraph","inlineContent":[{"text":"To share an ","type":"text"},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","isActive":true},{"text":" ","type":"text"},{"text":"object stored in ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" with a subview, pass the object reference to","type":"text"},{"text":" ","type":"text"},{"text":"the subview. OpenSwiftUI updates the subview anytime an observable property of","type":"text"},{"text":" ","type":"text"},{"text":"the object changes, but only when the subview’s ","type":"text"},{"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4","isActive":true},{"text":" reads the","type":"text"},{"text":" ","type":"text"},{"text":"property. For example, in the following code ","type":"text"},{"type":"codeVoice","code":"BookView"},{"text":" updates each time","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"title"},{"text":" changes but not when ","type":"text"},{"type":"codeVoice","code":"isAvailable"},{"text":" changes:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Observable","class Book {","    var title = \"A sample book\"","    var isAvailable = true","}","","struct ContentView: View {","    @State private var book = Book()","","    var body: some View {","        BookView(book: book)","    }","}","","struct BookView: View {","    var book: Book","","    var body: some View {","        Text(book.title)","    }","}"]},{"type":"paragraph","inlineContent":[{"code":"State","type":"codeVoice"},{"text":" properties provide bindings to their value. When storing an object,","type":"text"},{"text":" ","type":"text"},{"text":"you can get a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding"},{"text":" to that object, specifically the reference to the","type":"text"},{"text":" ","type":"text"},{"text":"object. This is useful when you need to change the reference stored in","type":"text"},{"text":" ","type":"text"},{"text":"state in some other subview, such as setting the reference to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @State private var book: Book?","","    var body: some View {","        DeleteBookView(book: $book)","            .task {","                book = Book()","            }","    }","}","","struct DeleteBookView: View {","    @Binding var book: Book?","","    var body: some View {","        Button(\"Delete book\") {","            book = nil","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, passing a "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","type":"reference","isActive":true},{"type":"text","text":" to an object stored in "},{"code":"State","type":"codeVoice"},{"type":"text","text":" isn’t"},{"type":"text","text":" "},{"type":"text","text":"necessary when you need to change properties of that object. For example,"},{"type":"text","text":" "},{"type":"text","text":"you can set the properties of the object to new values in a subview by"},{"type":"text","text":" "},{"type":"text","text":"passing the object reference instead of a binding to the reference:"}]},{"code":["struct ContentView: View {","    @State private var book = Book()","","    var body: some View {","        BookCheckoutView(book: book)","    }","}","","struct BookCheckoutView: View {","    var book: Book","","    var body: some View {","        Button(book.isAvailable ? \"Check out book\" : \"Return book\") {","            book.isAvailable.toggle()","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you need a binding to a specific property of the object, pass either the"},{"type":"text","text":" "},{"type":"text","text":"binding to the object and extract bindings to specific properties where"},{"type":"text","text":" "},{"type":"text","text":"needed, or pass the object reference and use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable"},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"wrapper to create bindings to specific properties. For example, in the"},{"type":"text","text":" "},{"type":"text","text":"following code "},{"code":"BookEditorView","type":"codeVoice"},{"type":"text","text":" wraps "},{"code":"book","type":"codeVoice"},{"type":"text","text":" with "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":". Then the"},{"type":"text","text":" "},{"type":"text","text":"view uses the "},{"code":"$","type":"codeVoice"},{"type":"text","text":" syntax to pass to a "},{"code":"TextField","type":"codeVoice"},{"type":"text","text":" a binding to "},{"code":"title","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["struct ContentView: View {","    @State private var book = Book()","","    var body: some View {","        BookView(book: book)","    }","}","","struct BookView: View {","    let book: Book","","    var body: some View {","        BookEditorView(book: book)","    }","}","","struct BookEditorView: View {","    @Bindable var book: Book","","    var body: some View {","        TextField(\"Title\", text: $book.title)","    }","}"],"type":"codeListing","syntax":"swift"}]}],"metadata":{"title":"State","platforms":[{"unavailable":false,"beta":false,"name":"iOS","introducedAt":"13.0","deprecated":false},{"unavailable":false,"beta":false,"name":"macOS","introducedAt":"10.15","deprecated":false},{"unavailable":false,"beta":false,"name":"tvOS","introducedAt":"13.0","deprecated":false},{"unavailable":false,"beta":false,"name":"visionOS","introducedAt":"1.0","deprecated":false},{"unavailable":false,"beta":false,"name":"watchOS","introducedAt":"6.0","deprecated":false}],"modules":[{"name":"OpenSwiftUI"}],"roleHeading":"Structure","role":"symbol","externalID":"s:15OpenSwiftUICore5StateV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}],"remoteSource":{"fileName":"State.swift","url":"https:\/\/github.com\/OpenSwiftUIProject\/OpenSwiftUI\/blob\/main\/Sources\/OpenSwiftUICore\/Data\/State\/State.swift#L259"},"symbolKind":"struct","navigatorTitle":[{"text":"State","kind":"identifier"}]},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/init(wrappedValue:)","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/init(initialValue:)","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/init()"],"title":"Creating a state","anchor":"Creating-a-state"},{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/wrappedValue","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/projectedValue"],"title":"Getting the value","anchor":"Getting-the-value"},{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/DynamicProperty-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/DynamicProperty","doc:\/\/OpenSwiftUI\/s8SendableP"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"seeAlsoSections":[{"identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-user-interface-state","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding"],"title":"Creating and sharing view state","generated":true,"anchor":"Creating-and-sharing-view-state"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State"},"sections":[],"variants":[{"paths":["\/documentation\/openswiftui\/state"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI/State/wrappedValue":{"role":"symbol","url":"\/documentation\/openswiftui\/state\/wrappedvalue","kind":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/wrappedValue","type":"topic","abstract":[{"type":"text","text":"The underlying value referenced by the state variable."}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"title":"wrappedValue"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/body-1otv4":{"defaultImplementations":3,"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:15OpenSwiftUICore4ViewP4BodyQa","text":"Body","kind":"typeIdentifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4","abstract":[{"text":"The content and behavior of the view.","type":"text"}],"required":true,"kind":"symbol","url":"\/documentation\/openswiftui\/view\/body-1otv4","title":"body","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State":{"navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can read and write a value managed by OpenSwiftUI.","type":"text"}],"title":"State","kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/state","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Scene":{"navigatorTitle":[{"text":"Scene","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene","abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/openswiftui\/scene","role":"symbol","title":"Scene","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scene","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View":{"url":"\/documentation\/openswiftui\/view","abstract":[{"type":"text","text":"A type that represents part of your app’s user interface and provides"},{"type":"text","text":" "},{"type":"text","text":"modifiers that you use to configure views."}],"role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View","title":"View","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"identifier"}],"navigatorTitle":[{"text":"View","kind":"identifier"}],"kind":"symbol"},"https://swiftpackageindex.com/openswiftuiproject/openobservation/main/documentation/openobservation/observable()":{"type":"link","url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()","titleInlineContent":[{"type":"text","text":"Observable()"}],"title":"Observable()","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Binding":{"abstract":[{"type":"text","text":"A property wrapper type that can read and write a value owned by a source of"},{"type":"text","text":" "},{"type":"text","text":"truth."}],"url":"\/documentation\/openswiftui\/binding","type":"topic","navigatorTitle":[{"text":"Binding","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Binding","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Binding","title":"Binding","kind":"symbol","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/task(priority:_:)":{"title":"task(priority:_:)","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/task(priority:_:)","abstract":[{"type":"text","text":"Adds an asynchronous task to perform before this view appears."}],"kind":"symbol","url":"\/documentation\/openswiftui\/view\/task(priority:_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":", () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:15OpenSwiftUICore4ViewP"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject":{"role":"symbol","navigatorTitle":[{"text":"StateObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","title":"StateObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/stateobject","abstract":[{"type":"text","text":"A property wrapper type that instantiates an observable object."}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/App":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"App","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/App","type":"topic","title":"App","role":"symbol","navigatorTitle":[{"text":"App","kind":"identifier"}],"url":"\/documentation\/openswiftui\/app","kind":"symbol","abstract":[{"text":"A type that represents the structure and behavior of an app.","type":"text"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State/projectedValue":{"title":"projectedValue","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:15OpenSwiftUICore7BindingV","text":"Binding"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/projectedValue","abstract":[{"type":"text","text":"A binding to the state value."}],"type":"topic","url":"\/documentation\/openswiftui\/state\/projectedvalue","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Bindable":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","title":"Bindable","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bindable"}],"role":"symbol","kind":"symbol","url":"\/documentation\/openswiftui\/bindable","navigatorTitle":[{"kind":"identifier","text":"Bindable"}],"abstract":[{"type":"text","text":"A property wrapper type that supports creating bindings to the mutable"},{"type":"text","text":" "},{"type":"text","text":"properties of observable objects."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/DynamicProperty":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicProperty","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/DynamicProperty","title":"DynamicProperty","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/openswiftui\/dynamicproperty","navigatorTitle":[{"text":"DynamicProperty","kind":"identifier"}],"abstract":[{"type":"text","text":"An interface for a stored variable that updates an external property of a"},{"type":"text","text":" "},{"type":"text","text":"view."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State/init()":{"role":"symbol","url":"\/documentation\/openswiftui\/state\/init()","kind":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/init()","type":"topic","abstract":[{"text":"Creates a state property without an initial value.","type":"text"}],"conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ExpressibleByNilLiteral","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"title":"init()"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State/DynamicProperty-Implementations":{"role":"collectionGroup","url":"\/documentation\/openswiftui\/state\/dynamicproperty-implementations","kind":"article","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/DynamicProperty-Implementations","type":"topic","abstract":[],"title":"DynamicProperty Implementations"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/managing-user-interface-state":{"abstract":[{"type":"text","text":"Encapsulate view-specific data within your app’s view hierarchy to make your"},{"type":"text","text":" "},{"type":"text","text":"views reusable."}],"title":"Managing user interface state","kind":"article","type":"topic","url":"\/documentation\/openswiftui\/managing-user-interface-state","role":"article","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-user-interface-state"},"https://swiftpackageindex.com/openswiftuiproject/openobservation/main/documentation/openobservation/observable":{"type":"link","url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","titleInlineContent":[{"text":"Observable","type":"text"}],"title":"Observable","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State/init(initialValue:)":{"title":"init(initialValue:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"initialValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/openswiftui\/state\/init(initialvalue:)","role":"symbol","abstract":[{"type":"text","text":"Creates a state property that stores an initial value."}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/init(initialValue:)","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State/init(wrappedValue:)":{"title":"init(wrappedValue:)","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"wrappedValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/openswiftui\/state\/init(wrappedvalue:)","role":"symbol","abstract":[{"type":"text","text":"Creates a state property that stores an initial wrapped value."}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State\/init(wrappedValue:)","kind":"symbol"},"https://swiftpackageindex.com/openswiftuiproject/opencombine/main/documentation/opencombine/observableobject":{"url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/opencombine\/main\/documentation\/opencombine\/observableobject","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/opencombine\/main\/documentation\/opencombine\/observableobject","titleInlineContent":[{"text":"ObservableObject","type":"text"}],"type":"link","title":"ObservableObject"},"doc://OpenSwiftUI/s8SendableP":{"identifier":"doc:\/\/OpenSwiftUI\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"}}}