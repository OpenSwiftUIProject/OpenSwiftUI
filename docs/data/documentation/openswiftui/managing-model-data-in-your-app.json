{"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"metadata":{"modules":[{"name":"OpenSwiftUI"}],"roleHeading":"Article","title":"Managing model data in your app","role":"article"},"variants":[{"paths":["\/documentation\/openswiftui\/managing-model-data-in-your-app"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","identifier":{"url":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/managing-model-data-in-your-app","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/model-data"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"An OpenSwiftUI app can display data that people can change using the app’s user","type":"text"},{"text":" ","type":"text"},{"text":"interface (UI). To manage that data, an app creates a data model, which is a","type":"text"},{"text":" ","type":"text"},{"text":"custom type that represents the data. A data model provides separation between","type":"text"},{"text":" ","type":"text"},{"text":"the data and the views that interact with the data. This separation promotes","type":"text"},{"text":" ","type":"text"},{"text":"modularity, improves testability, and helps make it easier to reason about how","type":"text"},{"text":" ","type":"text"},{"text":"the app works.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Keeping the model data (that is, an instance of a data model) in sync with what"},{"type":"text","text":" "},{"type":"text","text":"appears on the screen can be challenging, especially when the data appears in"},{"type":"text","text":" "},{"type":"text","text":"multiple views of the UI at the same time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"OpenSwiftUI helps keep your app’s UI up to date with changes made to the data"},{"type":"text","text":" "},{"type":"text","text":"thanks to Observation. With Observation, a view in OpenSwiftUI can form"},{"type":"text","text":" "},{"type":"text","text":"dependencies on observable data models and update the UI when data changes."}]},{"type":"aside","name":"Note","content":[{"inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation","type":"reference","isActive":true},{"text":" support","type":"text"},{"text":" ","type":"text"},{"text":"in OpenSwiftUI has no explicit availability limit. For information about adopting Observation in","type":"text"},{"text":" ","type":"text"},{"text":"existing apps, see","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/migrating-from-the-observable-object-protocol-to-the-observable-macro","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note"},{"type":"heading","level":3,"text":"Make model data observable","anchor":"Make-model-data-observable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To make data changes visible to OpenSwiftUI, apply the"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()","isActive":true},{"type":"text","text":" "},{"type":"text","text":"macro to your data model. This macro generates code that adds observation"},{"type":"text","text":" "},{"type":"text","text":"support to your data model at compile time, keeping your data model code focused"},{"type":"text","text":" "},{"type":"text","text":"on the properties that store data. For example, the following code defines a"},{"type":"text","text":" "},{"type":"text","text":"data model for books:"}]},{"type":"codeListing","code":["@Observable class Book: Identifiable {","    var title = \"Sample Book Title\"","    var author = Author()","    var isAvailable = true","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Observation also supports reference and value types. To help you decide which","type":"text"},{"text":" ","type":"text"},{"text":"type to use for your data model, see","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing-between-structures-and-classes","type":"reference"},{"text":".","type":"text"}]},{"type":"aside","name":"Important","content":[{"inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"overridingTitle":"Observable()","type":"reference","isActive":true,"overridingTitleInlineContent":[{"text":"Observable()","type":"text"}],"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()"},{"text":" ","type":"text"},{"text":"macro, in addition to adding observation functionality, also conforms your","type":"text"},{"text":" ","type":"text"},{"text":"data model type to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable"},{"text":" ","type":"text"},{"text":"protocol, which serves as a signal to other APIs that your type supports","type":"text"},{"text":" ","type":"text"},{"text":"observation. Don’t apply the ","type":"text"},{"type":"codeVoice","code":"Observable"},{"text":" protocol by itself to your data","type":"text"},{"text":" ","type":"text"},{"text":"model type, since that alone doesn’t add any observation functionality.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, always use the ","type":"text"},{"type":"codeVoice","code":"Observable"},{"text":" macro when adding observation support to","type":"text"},{"text":" ","type":"text"},{"text":"your type.","type":"text"}],"type":"paragraph"}],"style":"important"},{"type":"heading","level":3,"text":"Observe model data in a view","anchor":"Observe-model-data-in-a-view"},{"type":"paragraph","inlineContent":[{"text":"In OpenSwiftUI, a view forms a dependency on an observable data model object,","type":"text"},{"text":" ","type":"text"},{"text":"such as an instance of Book, when the view’s ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4"},{"text":" ","type":"text"},{"text":"property reads a property of the object. If body doesn’t read any properties of","type":"text"},{"text":" ","type":"text"},{"text":"an observable data model object, the view doesn’t track any dependencies.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When a tracked property changes, OpenSwiftUI updates the view. If other","type":"text"},{"text":" ","type":"text"},{"text":"properties change that ","type":"text"},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4","type":"reference"},{"text":" doesn’t read, the view is","type":"text"},{"text":" ","type":"text"},{"text":"unaffected and avoids unnecessary updates. For example, the view in the","type":"text"},{"text":" ","type":"text"},{"text":"following code updates only when a book’s ","type":"text"},{"code":"title","type":"codeVoice"},{"text":" changes but not when ","type":"text"},{"code":"author","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"isAvailable","type":"codeVoice"},{"text":" changes:","type":"text"}]},{"type":"codeListing","code":["struct BookView: View {","    var book: Book","    ","    var body: some View {","        Text(book.title)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"OpenSwiftUI establishes this dependency tracking even if the view doesn’t store","type":"text"},{"text":" ","type":"text"},{"text":"the observable type, such as when using a global property or singleton:","type":"text"}]},{"type":"codeListing","code":["var globalBook: Book = Book()","","struct BookView: View {","    var body: some View {","        Text(globalBook.title)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Observation also supports tracking of computed properties when the computed","type":"text"},{"text":" ","type":"text"},{"text":"property makes use of an observable property. For instance, the view in the","type":"text"},{"text":" ","type":"text"},{"text":"following code updates when the number of available books changes:","type":"text"}]},{"type":"codeListing","code":["@Observable class Library {","    var books: [Book] = [Book(), Book(), Book()]","    ","    var availableBooksCount: Int {","        books.filter(\\.isAvailable).count","    }","}","","struct LibraryView: View {","    @Environment(Library.self) private var library","    ","    var body: some View {","        NavigationStack {","            List(library.books) { book in","                \/\/ ...","            }","            .navigationTitle(\"Books available: \\(library.availableBooksCount)\")","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When a view forms a dependency on a collection of objects, of any collection","type":"text"},{"text":" ","type":"text"},{"text":"type, the view tracks changes made to the collection itself. For instance, the","type":"text"},{"text":" ","type":"text"},{"text":"view in the following code forms a dependency on books because body reads it.","type":"text"},{"text":" ","type":"text"},{"text":"As changes occur to books, such as inserting, deleting, moving, or replacing","type":"text"},{"text":" ","type":"text"},{"text":"items in the collection, OpenSwiftUI updates the view.","type":"text"}]},{"type":"codeListing","code":["struct LibraryView: View {","    @State private var books = [Book(), Book(), Book()]","","    var body: some View {","        List(books) { book in ","            Text(book.title)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"LibraryView"},{"type":"text","text":" doesn’t form a dependency on the property "},{"type":"codeVoice","code":"title"},{"type":"text","text":" because"},{"type":"text","text":" "},{"type":"text","text":"the view’s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4"},{"type":"text","text":" doesn’t read it directly. The view"},{"type":"text","text":" "},{"type":"text","text":"stores the "},{"type":"codeVoice","code":"List"},{"type":"text","text":" content closure as an "},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":" closure that OpenSwiftUI"},{"type":"text","text":" "},{"type":"text","text":"calls when lazily creating list items before they appear on the screen. This"},{"type":"text","text":" "},{"type":"text","text":"means that instead of "},{"type":"codeVoice","code":"LibraryView"},{"type":"text","text":" depending on a book’s "},{"type":"codeVoice","code":"title"},{"type":"text","text":", each "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Text"},{"type":"text","text":" "},{"type":"text","text":"item of the list depends on "},{"type":"codeVoice","code":"title"},{"type":"text","text":". Any changes to a "},{"type":"codeVoice","code":"title"},{"type":"text","text":" updates only the"},{"type":"text","text":" "},{"type":"text","text":"individual "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Text"},{"type":"text","text":" representing the book and not the others."}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"Observation tracks changes to any observable property that appears in the","type":"text"},{"text":" ","type":"text"},{"text":"execution scope of a view’s ","type":"text"},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4","type":"reference"},{"text":" property.","type":"text"}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also share an observable model data object with another view. The"},{"type":"text","text":" "},{"type":"text","text":"receiving view forms a dependency if it reads any properties of the object in"},{"type":"text","text":" "},{"type":"text","text":"the its "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4","isActive":true,"type":"reference"},{"type":"text","text":". For example, in the following code"},{"type":"text","text":" "},{"code":"LibraryView","type":"codeVoice"},{"type":"text","text":" shares an instance of "},{"code":"Book","type":"codeVoice"},{"type":"text","text":" with "},{"code":"BookView","type":"codeVoice"},{"type":"text","text":", and "},{"code":"BookView","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"displays the book’s "},{"code":"title","type":"codeVoice"},{"type":"text","text":". If the book’s "},{"code":"title","type":"codeVoice"},{"type":"text","text":" changes, OpenSwiftUI updates"},{"type":"text","text":" "},{"type":"text","text":"only "},{"code":"BookView","type":"codeVoice"},{"type":"text","text":", and not "},{"code":"LibraryView","type":"codeVoice"},{"type":"text","text":", because only "},{"code":"BookView","type":"codeVoice"},{"type":"text","text":" reads the title"},{"type":"text","text":" "},{"type":"text","text":"property."}]},{"type":"codeListing","code":["struct LibraryView: View {","    @State private var books = [Book(), Book(), Book()]","","    var body: some View {","        List(books) { book in ","            BookView(book: book)","        }","    }","}","","struct BookView: View {","    var book: Book","    ","    var body: some View {","        Text(book.title)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If a view doesn’t have any dependencies, OpenSwiftUI doesn’t update the view","type":"text"},{"text":" ","type":"text"},{"text":"when data changes. This approach allows an observable model data object to pass","type":"text"},{"text":" ","type":"text"},{"text":"through multiple layers of a view hierarchy without each intermediate view","type":"text"},{"text":" ","type":"text"},{"text":"forming a dependency.","type":"text"}]},{"type":"codeListing","code":["\/\/ Will not update when any property of `book` changes.","struct LibraryView: View {","    @State private var books = [Book(), Book(), Book()]","    ","    var body: some View {","        LibraryItemView(book: book)","    }","}","","\/\/ Will not update when any property of `book` changes.","struct LibraryItemView: View {","    var book: Book","    ","    var body: some View {","        BookView(book: book)","    }","}","","\/\/ Will update when `book.title` changes.","struct BookView: View {","    var book: Book","    ","    var body: some View {","        Text(book.title)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, a view that stores a reference to the observable object updates if the"},{"type":"text","text":" "},{"type":"text","text":"reference changes. This happens because the stored reference is part of the"},{"type":"text","text":" "},{"type":"text","text":"view’s value and not because the object is observable. For example, if the"},{"type":"text","text":" "},{"type":"text","text":"reference to book in the follow code changes, OpenSwiftUI updates the view:"}]},{"type":"codeListing","code":["struct BookView: View {","    var book: Book","    ","    var body: some View {","        \/\/ ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"A view can also form a dependency on an observable data model object accessed","type":"text"},{"text":" ","type":"text"},{"text":"through another object. For example, the view in the following code updates when","type":"text"},{"text":" ","type":"text"},{"text":"the author’s ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" changes:","type":"text"}]},{"type":"codeListing","code":["struct LibraryItemView: View {","    var book: Book","    ","    var body: some View {","        VStack(alignment: .leading) {","            Text(book.title)","            Text(\"Written by: \\(book.author.name)\")","                .font(.caption)","        }","    }","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Create the source of truth for model data","anchor":"Create-the-source-of-truth-for-model-data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create and store the source of truth for model data, declare a private"},{"type":"text","text":" "},{"type":"text","text":"variable and initialize it with a instance of an observable data model type."},{"type":"text","text":" "},{"type":"text","text":"Then wrap it with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State"},{"type":"text","text":" property wrapper. For example, the following code"},{"type":"text","text":" "},{"type":"text","text":"stores an instance of the data model type Book in the state variable "},{"type":"codeVoice","code":"book"},{"type":"text","text":":"}]},{"type":"codeListing","code":["struct BookView: View {","    @State private var book = Book()","    ","    var body: some View {","        Text(book.title)","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"By wrapping the book with ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","isActive":true,"type":"reference"},{"text":", you’re telling OpenSwiftUI to manage the","type":"text"},{"text":" ","type":"text"},{"text":"storage of the instance. Each time OpenSwiftUI re-creates ","type":"text"},{"code":"BookView","type":"codeVoice"},{"text":", it","type":"text"},{"text":" ","type":"text"},{"text":"connects the ","type":"text"},{"code":"book","type":"codeVoice"},{"text":" variable to the managed instance, providing the view a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"single source of truth for the model data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also create a state object in your top-level "},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/App"},{"type":"text","text":" instance or in one"},{"type":"text","text":" "},{"type":"text","text":"of your app’s "},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene"},{"type":"text","text":" instances. For example, the following code creates an"},{"type":"text","text":" "},{"type":"text","text":"instance of "},{"type":"codeVoice","code":"Library"},{"type":"text","text":" in the app’s top-level structure:"}]},{"type":"codeListing","code":["@main","struct BookReaderApp: App {","    @State private var library = Library()","    ","    var body: some Scene {","        WindowGroup {","            LibraryView()","                .environment(library)","        }","    }","}"],"syntax":"swift"},{"type":"heading","level":3,"text":"Share model data throughout a view hierarchy","anchor":"Share-model-data-throughout-a-view-hierarchy"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have a data model object, like "},{"type":"codeVoice","code":"Library"},{"type":"text","text":", that you want to share"},{"type":"text","text":" "},{"type":"text","text":"throughout your app, you can either:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"pass the data model object to each view in the view hierarchy; or"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"add the data model object to the view’s environment"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing model data to each view is convenient when you have a shallow view"},{"type":"text","text":" "},{"type":"text","text":"hierarchy; for example, when a view doesn’t share the object with its subviews."},{"type":"text","text":" "},{"type":"text","text":"However, you usually don’t know if a view needs to pass the object to subviews,"},{"type":"text","text":" "},{"type":"text","text":"and you may not know if a subview deep inside the layers of the hierarchy needs"},{"type":"text","text":" "},{"type":"text","text":"the model data."}]},{"type":"paragraph","inlineContent":[{"text":"To share model data throughout a view hierarchy without needing to pass it to","type":"text"},{"text":" ","type":"text"},{"text":"each view, add the model data to the view’s environment. You can add the data to","type":"text"},{"text":" ","type":"text"},{"text":"the environment using either ","type":"text"},{"code":"environment(_:_:)","type":"codeVoice"},{"text":" or the ","type":"text"},{"code":"environment(_:)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"modifier, passing in the model data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before you can use the "},{"type":"codeVoice","code":"environment(_:_:)"},{"type":"text","text":" modifier, you need to create a"},{"type":"text","text":" "},{"type":"text","text":"custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentKey"},{"type":"text","text":". Then extend "},{"type":"reference","isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentValues"},{"type":"text","text":" to include a custom"},{"type":"text","text":" "},{"type":"text","text":"environment property that gets and sets the value for the custom key. For"},{"type":"text","text":" "},{"type":"text","text":"instance, the following code creates an environment key and property for"},{"type":"text","text":" "},{"type":"codeVoice","code":"library"},{"type":"text","text":":"}]},{"type":"codeListing","code":["extension EnvironmentValues {","    var library: Library {","        get { self[LibraryKey.self] }","        set { self[LibraryKey.self] = newValue }","    }","}","","private struct LibraryKey: EnvironmentKey {","    static var defaultValue: Library = Library()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"With the custom environment key and property in place, a view can add model data","type":"text"},{"text":" ","type":"text"},{"text":"to its environment. For example, ","type":"text"},{"code":"LibraryView","type":"codeVoice"},{"text":" adds the source of truth for a","type":"text"},{"text":" ","type":"text"},{"code":"Library","type":"codeVoice"},{"text":" instance to its environment using the ","type":"text"},{"code":"environment(_:_:)","type":"codeVoice"},{"text":" modifier:","type":"text"}]},{"type":"codeListing","code":["@main","struct BookReaderApp: App {","    @State private var library = Library()","    ","    var body: some Scene {","        WindowGroup {","            LibraryView()","                .environment(\\.library, library)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To retrieve the "},{"type":"codeVoice","code":"Library"},{"type":"text","text":" instance from the environment, a view defines a local"},{"type":"text","text":" "},{"type":"text","text":"variable that stores a reference to the instance, and then wraps the variable"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Environment"},{"type":"text","text":" property wrapper, passing in the key path to the custom"},{"type":"text","text":" "},{"type":"text","text":"environment value."}]},{"type":"codeListing","code":["struct LibraryView: View {","    @Environment(\\.library) private var library","","    var body: some View {","        \/\/ ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also store model data directly in the environment without defining a"},{"text":" ","type":"text"},{"text":"custom environment value by using the ","type":"text"},{"code":"environment(_:)","type":"codeVoice"},{"text":" modifier. For","type":"text"},{"text":" ","type":"text"},{"text":"instance, the following code adds a ","type":"text"},{"code":"Library","type":"codeVoice"},{"text":" instance to the environment using","type":"text"},{"text":" ","type":"text"},{"text":"this modifier:","type":"text"}]},{"type":"codeListing","code":["@main","struct BookReaderApp: App {","    @State private var library = Library()","    ","    var body: some Scene {","        WindowGroup {","            LibraryView()","                .environment(library)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To retrieve the instance from the environment, another view defines a local"},{"type":"text","text":" "},{"type":"text","text":"variable to store the instance and wraps it with the "},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Environment","type":"reference","isActive":true},{"type":"text","text":" property"},{"type":"text","text":" "},{"type":"text","text":"wrapper. But instead of providing a key path to the environment value, you can"},{"type":"text","text":" "},{"type":"text","text":"provide the model data type, as shown in the following code:"}]},{"type":"codeListing","code":["struct LibraryView: View {","    @Environment(Library.self) private var library","    ","    var body: some View {","        \/\/ ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"By default, reading an object from the environment returns a non-optional object","type":"text"},{"text":" ","type":"text"},{"text":"when using the object type as the key. This default behavior assumes that a view","type":"text"},{"text":" ","type":"text"},{"text":"in the current hierarchy previously stored a non-optional instance of the type","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"code":"environment(_:)","type":"codeVoice"},{"text":" modifier. If a view attempts to retrieve an object","type":"text"},{"text":" ","type":"text"},{"text":"using its type and that object isn’t in the environment, OpenSwiftUI throws","type":"text"},{"text":" ","type":"text"},{"text":"exception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In cases where there is no guarantee that an object is in the environment,"},{"type":"text","text":" "},{"type":"text","text":"retrieve an optional version of the object as shown in the following code. If"},{"type":"text","text":" "},{"type":"text","text":"the object isn’t available the environment, OpenSwiftUI returns nil instead of"},{"type":"text","text":" "},{"type":"text","text":"throwing an exception."}]},{"type":"codeListing","code":["@Environment(Library.self) private var library: Library?"],"syntax":"swift"},{"type":"heading","level":3,"text":"Change model data in a view","anchor":"Change-model-data-in-a-view"},{"type":"paragraph","inlineContent":[{"text":"In most apps, people can change data that the app presents. When data changes,","type":"text"},{"text":" ","type":"text"},{"text":"any views that display the data should update to reflect the changed data. With","type":"text"},{"text":" ","type":"text"},{"text":"Observation in OpenSwiftUI, a view can support data changes without using","type":"text"},{"text":" ","type":"text"},{"text":"property wrappers or bindings. For example, the following toggles the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"isAvailable"},{"text":" property of a book in the action closure of a button:","type":"text"}]},{"type":"codeListing","code":["struct BookView: View {","    var book: Book","    ","    var body: some View {","        List {","            Text(book.title)","            HStack {","                Text(book.isAvailable ? \"Available for checkout\" : \"Waiting for return\")","                Spacer()","                Button(book.isAvailable ? \"Check out\" : \"Return\") {","                    book.isAvailable.toggle()","                }","            }","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there may be times when a view expects a binding before it can change"},{"type":"text","text":" "},{"type":"text","text":"the value of a mutable property. To provide a binding, wrap the model data with"},{"type":"text","text":" "},{"type":"text","text":"the "},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","type":"reference"},{"type":"text","text":" property wrapper. For example, the following code wraps the"},{"type":"text","text":" "},{"type":"text","text":"book variable with "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":". Then it uses a "},{"code":"TextField","type":"codeVoice"},{"type":"text","text":" to change the"},{"type":"text","text":" "},{"code":"title","type":"codeVoice"},{"type":"text","text":" property of a book, and a "},{"isActive":true,"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Toggle","type":"reference"},{"type":"text","text":" to change the "},{"code":"isAvailable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property, using the "},{"code":"$","type":"codeVoice"},{"type":"text","text":" syntax to pass a binding to each property."}]},{"type":"codeListing","code":["struct BookEditView: View {","    @Bindable var book: Book","    @Environment(\\.dismiss) private var dismiss","    ","    var body: some View {","        VStack() {","            HStack {","                Text(\"Title\")","                TextField(\"Title\", text: $book.title)","                    .textFieldStyle(.roundedBorder)","                    .onSubmit {","                        dismiss()","                    }","            }","            ","            Toggle(isOn: $book.isAvailable) {","                Text(\"Book is available\")","            }","            ","            Button(\"Close\") {","                dismiss()","            }","            .buttonStyle(.borderedProminent)","        }","        .padding()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","isActive":true,"type":"reference"},{"text":" property wrapper on properties and variables to an","type":"text"},{"text":" ","type":"text"},{"identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","overridingTitle":"Observable","isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"Observable","type":"text"}]},{"text":" ","type":"text"},{"text":"object. This includes global variables, properties that exists outside of","type":"text"},{"text":" ","type":"text"},{"text":"OpenSwiftUI types, or even local variables. For example, you can create a","type":"text"},{"text":" ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" variable within a view’s ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4"},{"text":":","type":"text"}]},{"type":"codeListing","code":["struct LibraryView: View {","    @State private var books = [Book(), Book(), Book()]","","    var body: some View {","        List(books) { book in ","            @Bindable var book = book","            TextField(\"Title\", text: $book.title)","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" variable "},{"code":"book","type":"codeVoice"},{"type":"text","text":" provides a binding that connects "},{"code":"TextField","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"code":"title","type":"codeVoice"},{"type":"text","text":" property of a book so that a person can make changes directly to"},{"type":"text","text":" "},{"type":"text","text":"the model data."}]}]}],"abstract":[{"type":"text","text":"Create connections between your app’s data model and views."}],"seeAlsoSections":[{"anchor":"Creating-model-data","title":"Creating model data","identifiers":["doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject"],"generated":true}],"references":{"doc://OpenSwiftUI/documentation/OpenSwiftUI/Toggle":{"title":"Toggle","kind":"symbol","navigatorTitle":[{"text":"Toggle","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Toggle","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Toggle","url":"\/documentation\/openswiftui\/toggle"},"https://developer.apple.com/documentation/swift/choosing-between-structures-and-classes":{"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing-between-structures-and-classes","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing-between-structures-and-classes","title":"Choosing Between Structures and Classes","titleInlineContent":[{"type":"text","text":"Choosing Between Structures and Classes"}]},"https://swiftpackageindex.com/openswiftuiproject/openobservation/main/documentation/openobservation/observable()":{"type":"link","url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable()","title":"Observable()","titleInlineContent":[{"type":"text","text":"Observable()"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/StateObject":{"role":"symbol","navigatorTitle":[{"text":"StateObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/StateObject","title":"StateObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StateObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/stateobject","abstract":[{"type":"text","text":"A property wrapper type that instantiates an observable object."}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI","url":"\/documentation\/openswiftui","role":"collection","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Declare the user interface and behavior for your app on every platform."}],"title":"OpenSwiftUI"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Text":{"abstract":[],"role":"symbol","navigatorTitle":[{"text":"Text","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Text","kind":"identifier"}],"url":"\/documentation\/openswiftui\/text","kind":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Text","title":"Text"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/EnvironmentValues":{"navigatorTitle":[{"text":"EnvironmentValues","kind":"identifier"}],"abstract":[{"type":"text","text":"A collection of environment values propagated through a view hierarchy."}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentValues","role":"symbol","url":"\/documentation\/openswiftui\/environmentvalues","kind":"symbol","title":"EnvironmentValues","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EnvironmentValues","kind":"identifier"}],"type":"topic"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Environment":{"url":"\/documentation\/openswiftui\/environment","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Environment","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that reads a value from a view’s environment."}],"title":"Environment","role":"symbol","navigatorTitle":[{"text":"Environment","kind":"identifier"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/App":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"App","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/App","type":"topic","title":"App","role":"symbol","navigatorTitle":[{"text":"App","kind":"identifier"}],"url":"\/documentation\/openswiftui\/app","kind":"symbol","abstract":[{"text":"A type that represents the structure and behavior of an app.","type":"text"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/ObservedObject":{"role":"symbol","navigatorTitle":[{"text":"ObservedObject","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/ObservedObject","title":"ObservedObject","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObservedObject","kind":"identifier"}],"url":"\/documentation\/openswiftui\/observedobject","abstract":[{"type":"text","text":"A property wrapper type that subscribes to an observable object and"},{"type":"text","text":" "},{"type":"text","text":"invalidates a view whenever the observable object changes."}],"type":"topic","kind":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Bindable":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Bindable","title":"Bindable","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bindable"}],"role":"symbol","kind":"symbol","url":"\/documentation\/openswiftui\/bindable","navigatorTitle":[{"kind":"identifier","text":"Bindable"}],"abstract":[{"type":"text","text":"A property wrapper type that supports creating bindings to the mutable"},{"type":"text","text":" "},{"type":"text","text":"properties of observable objects."}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/Scene":{"navigatorTitle":[{"text":"Scene","kind":"identifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/Scene","abstract":[],"type":"topic","kind":"symbol","url":"\/documentation\/openswiftui\/scene","role":"symbol","title":"Scene","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scene","kind":"identifier"}]},"https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro":{"type":"link","url":"https:\/\/developer.apple.com\/documentation\/swiftui\/migrating-from-the-observable-object-protocol-to-the-observable-macro","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/migrating-from-the-observable-object-protocol-to-the-observable-macro","title":"Migrating from the Observable Object protocol to the Observable macro","titleInlineContent":[{"type":"text","text":"Migrating from the Observable Object protocol to the Observable macro"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/EnvironmentKey":{"abstract":[{"type":"text","text":"A key for accessing values in the environment."}],"navigatorTitle":[{"text":"EnvironmentKey","kind":"identifier"}],"url":"\/documentation\/openswiftui\/environmentkey","type":"topic","kind":"symbol","title":"EnvironmentKey","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/EnvironmentKey","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EnvironmentKey","kind":"identifier"}],"role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/View/body-1otv4":{"defaultImplementations":3,"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:15OpenSwiftUICore4ViewP4BodyQa","text":"Body","kind":"typeIdentifier"}],"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/View\/body-1otv4","abstract":[{"text":"The content and behavior of the view.","type":"text"}],"required":true,"kind":"symbol","url":"\/documentation\/openswiftui\/view\/body-1otv4","title":"body","role":"symbol"},"doc://OpenSwiftUI/documentation/OpenSwiftUI/model-data":{"identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/model-data","title":"Model data","type":"topic","role":"collectionGroup","kind":"article","url":"\/documentation\/openswiftui\/model-data","abstract":[{"type":"text","text":"Manage the data that your app uses to drive its interface."}]},"https://swiftpackageindex.com/openswiftuiproject/openobservation/main/documentation/openobservation/observable":{"type":"link","url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation\/observable","title":"Observable","titleInlineContent":[{"type":"text","text":"Observable"}]},"doc://OpenSwiftUI/documentation/OpenSwiftUI/State":{"navigatorTitle":[{"text":"State","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can read and write a value managed by OpenSwiftUI.","type":"text"}],"title":"State","kind":"symbol","type":"topic","url":"\/documentation\/openswiftui\/state","role":"symbol","identifier":"doc:\/\/OpenSwiftUI\/documentation\/OpenSwiftUI\/State","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}]},"https://swiftpackageindex.com/openswiftuiproject/openobservation/main/documentation/openobservation":{"type":"link","url":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation","identifier":"https:\/\/swiftpackageindex.com\/openswiftuiproject\/openobservation\/main\/documentation\/openobservation","title":"OpenObservation","titleInlineContent":[{"type":"text","text":"OpenObservation"}]}}}